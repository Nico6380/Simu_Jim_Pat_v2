
Simu_Jim_Pat_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a90  08003a90  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a90  08003a90  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a90  08003a90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000070  08003b08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08003b08  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001008a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002044  00000000  00000000  00030123  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  00032168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  00032cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000159c3  00000000  00000000  00033760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093de  00000000  00000000  00049123  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007263a  00000000  00000000  00052501  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a4  00000000  00000000  000c4bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a4c 	.word	0x08003a4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a4c 	.word	0x08003a4c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fa28 	bl	80035bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000ac 	.word	0x200000ac

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000ac 	.word	0x200000ac

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800047a:	2b02      	cmp	r3, #2
 800047c:	d005      	beq.n	800048a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2204      	movs	r2, #4
 8000482:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e051      	b.n	800052e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f022 020e 	bic.w	r2, r2, #14
 8000498:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f022 0201 	bic.w	r2, r2, #1
 80004a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a22      	ldr	r2, [pc, #136]	; (8000538 <HAL_DMA_Abort_IT+0xd0>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d029      	beq.n	8000508 <HAL_DMA_Abort_IT+0xa0>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a20      	ldr	r2, [pc, #128]	; (800053c <HAL_DMA_Abort_IT+0xd4>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d022      	beq.n	8000504 <HAL_DMA_Abort_IT+0x9c>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1f      	ldr	r2, [pc, #124]	; (8000540 <HAL_DMA_Abort_IT+0xd8>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d01a      	beq.n	80004fe <HAL_DMA_Abort_IT+0x96>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <HAL_DMA_Abort_IT+0xdc>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d012      	beq.n	80004f8 <HAL_DMA_Abort_IT+0x90>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <HAL_DMA_Abort_IT+0xe0>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d00a      	beq.n	80004f2 <HAL_DMA_Abort_IT+0x8a>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1a      	ldr	r2, [pc, #104]	; (800054c <HAL_DMA_Abort_IT+0xe4>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d102      	bne.n	80004ec <HAL_DMA_Abort_IT+0x84>
 80004e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ea:	e00e      	b.n	800050a <HAL_DMA_Abort_IT+0xa2>
 80004ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004f0:	e00b      	b.n	800050a <HAL_DMA_Abort_IT+0xa2>
 80004f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f6:	e008      	b.n	800050a <HAL_DMA_Abort_IT+0xa2>
 80004f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fc:	e005      	b.n	800050a <HAL_DMA_Abort_IT+0xa2>
 80004fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000502:	e002      	b.n	800050a <HAL_DMA_Abort_IT+0xa2>
 8000504:	2310      	movs	r3, #16
 8000506:	e000      	b.n	800050a <HAL_DMA_Abort_IT+0xa2>
 8000508:	2301      	movs	r3, #1
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_DMA_Abort_IT+0xe8>)
 800050c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000522:	2b00      	cmp	r3, #0
 8000524:	d003      	beq.n	800052e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	4798      	blx	r3
    } 
  }
  return status;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020008 	.word	0x40020008
 800053c:	4002001c 	.word	0x4002001c
 8000540:	40020030 	.word	0x40020030
 8000544:	40020044 	.word	0x40020044
 8000548:	40020058 	.word	0x40020058
 800054c:	4002006c 	.word	0x4002006c
 8000550:	40020000 	.word	0x40020000

08000554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000554:	b480      	push	{r7}
 8000556:	b08b      	sub	sp, #44	; 0x2c
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
 8000576:	e127      	b.n	80007c8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000578:	2201      	movs	r2, #1
 800057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	69fa      	ldr	r2, [r7, #28]
 8000588:	4013      	ands	r3, r2
 800058a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800058c:	69ba      	ldr	r2, [r7, #24]
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	429a      	cmp	r2, r3
 8000592:	f040 8116 	bne.w	80007c2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	2b12      	cmp	r3, #18
 800059c:	d034      	beq.n	8000608 <HAL_GPIO_Init+0xb4>
 800059e:	2b12      	cmp	r3, #18
 80005a0:	d80d      	bhi.n	80005be <HAL_GPIO_Init+0x6a>
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d02b      	beq.n	80005fe <HAL_GPIO_Init+0xaa>
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d804      	bhi.n	80005b4 <HAL_GPIO_Init+0x60>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d031      	beq.n	8000612 <HAL_GPIO_Init+0xbe>
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d01c      	beq.n	80005ec <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80005b2:	e048      	b.n	8000646 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d043      	beq.n	8000640 <HAL_GPIO_Init+0xec>
 80005b8:	2b11      	cmp	r3, #17
 80005ba:	d01b      	beq.n	80005f4 <HAL_GPIO_Init+0xa0>
          break;
 80005bc:	e043      	b.n	8000646 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005be:	4a87      	ldr	r2, [pc, #540]	; (80007dc <HAL_GPIO_Init+0x288>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d026      	beq.n	8000612 <HAL_GPIO_Init+0xbe>
 80005c4:	4a85      	ldr	r2, [pc, #532]	; (80007dc <HAL_GPIO_Init+0x288>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d806      	bhi.n	80005d8 <HAL_GPIO_Init+0x84>
 80005ca:	4a85      	ldr	r2, [pc, #532]	; (80007e0 <HAL_GPIO_Init+0x28c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d020      	beq.n	8000612 <HAL_GPIO_Init+0xbe>
 80005d0:	4a84      	ldr	r2, [pc, #528]	; (80007e4 <HAL_GPIO_Init+0x290>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d01d      	beq.n	8000612 <HAL_GPIO_Init+0xbe>
          break;
 80005d6:	e036      	b.n	8000646 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80005d8:	4a83      	ldr	r2, [pc, #524]	; (80007e8 <HAL_GPIO_Init+0x294>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d019      	beq.n	8000612 <HAL_GPIO_Init+0xbe>
 80005de:	4a83      	ldr	r2, [pc, #524]	; (80007ec <HAL_GPIO_Init+0x298>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d016      	beq.n	8000612 <HAL_GPIO_Init+0xbe>
 80005e4:	4a82      	ldr	r2, [pc, #520]	; (80007f0 <HAL_GPIO_Init+0x29c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d013      	beq.n	8000612 <HAL_GPIO_Init+0xbe>
          break;
 80005ea:	e02c      	b.n	8000646 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	623b      	str	r3, [r7, #32]
          break;
 80005f2:	e028      	b.n	8000646 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	3304      	adds	r3, #4
 80005fa:	623b      	str	r3, [r7, #32]
          break;
 80005fc:	e023      	b.n	8000646 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	3308      	adds	r3, #8
 8000604:	623b      	str	r3, [r7, #32]
          break;
 8000606:	e01e      	b.n	8000646 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	330c      	adds	r3, #12
 800060e:	623b      	str	r3, [r7, #32]
          break;
 8000610:	e019      	b.n	8000646 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d102      	bne.n	8000620 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800061a:	2304      	movs	r3, #4
 800061c:	623b      	str	r3, [r7, #32]
          break;
 800061e:	e012      	b.n	8000646 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d105      	bne.n	8000634 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000628:	2308      	movs	r3, #8
 800062a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	69fa      	ldr	r2, [r7, #28]
 8000630:	611a      	str	r2, [r3, #16]
          break;
 8000632:	e008      	b.n	8000646 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000634:	2308      	movs	r3, #8
 8000636:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	69fa      	ldr	r2, [r7, #28]
 800063c:	615a      	str	r2, [r3, #20]
          break;
 800063e:	e002      	b.n	8000646 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
          break;
 8000644:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	2bff      	cmp	r3, #255	; 0xff
 800064a:	d801      	bhi.n	8000650 <HAL_GPIO_Init+0xfc>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	e001      	b.n	8000654 <HAL_GPIO_Init+0x100>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3304      	adds	r3, #4
 8000654:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	2bff      	cmp	r3, #255	; 0xff
 800065a:	d802      	bhi.n	8000662 <HAL_GPIO_Init+0x10e>
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	e002      	b.n	8000668 <HAL_GPIO_Init+0x114>
 8000662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000664:	3b08      	subs	r3, #8
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	210f      	movs	r1, #15
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	401a      	ands	r2, r3
 800067a:	6a39      	ldr	r1, [r7, #32]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	431a      	orrs	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 8096 	beq.w	80007c2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000696:	4b57      	ldr	r3, [pc, #348]	; (80007f4 <HAL_GPIO_Init+0x2a0>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a56      	ldr	r2, [pc, #344]	; (80007f4 <HAL_GPIO_Init+0x2a0>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b54      	ldr	r3, [pc, #336]	; (80007f4 <HAL_GPIO_Init+0x2a0>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80006ae:	4a52      	ldr	r2, [pc, #328]	; (80007f8 <HAL_GPIO_Init+0x2a4>)
 80006b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b2:	089b      	lsrs	r3, r3, #2
 80006b4:	3302      	adds	r3, #2
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006be:	f003 0303 	and.w	r3, r3, #3
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	220f      	movs	r2, #15
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	4013      	ands	r3, r2
 80006d0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a49      	ldr	r2, [pc, #292]	; (80007fc <HAL_GPIO_Init+0x2a8>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d013      	beq.n	8000702 <HAL_GPIO_Init+0x1ae>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a48      	ldr	r2, [pc, #288]	; (8000800 <HAL_GPIO_Init+0x2ac>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d00d      	beq.n	80006fe <HAL_GPIO_Init+0x1aa>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a47      	ldr	r2, [pc, #284]	; (8000804 <HAL_GPIO_Init+0x2b0>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d007      	beq.n	80006fa <HAL_GPIO_Init+0x1a6>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a46      	ldr	r2, [pc, #280]	; (8000808 <HAL_GPIO_Init+0x2b4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_GPIO_Init+0x1a2>
 80006f2:	2303      	movs	r3, #3
 80006f4:	e006      	b.n	8000704 <HAL_GPIO_Init+0x1b0>
 80006f6:	2304      	movs	r3, #4
 80006f8:	e004      	b.n	8000704 <HAL_GPIO_Init+0x1b0>
 80006fa:	2302      	movs	r3, #2
 80006fc:	e002      	b.n	8000704 <HAL_GPIO_Init+0x1b0>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <HAL_GPIO_Init+0x1b0>
 8000702:	2300      	movs	r3, #0
 8000704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000706:	f002 0203 	and.w	r2, r2, #3
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	4093      	lsls	r3, r2
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	4313      	orrs	r3, r2
 8000712:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000714:	4938      	ldr	r1, [pc, #224]	; (80007f8 <HAL_GPIO_Init+0x2a4>)
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	089b      	lsrs	r3, r3, #2
 800071a:	3302      	adds	r3, #2
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d006      	beq.n	800073c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4936      	ldr	r1, [pc, #216]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	4313      	orrs	r3, r2
 8000738:	600b      	str	r3, [r1, #0]
 800073a:	e006      	b.n	800074a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800073c:	4b33      	ldr	r3, [pc, #204]	; (800080c <HAL_GPIO_Init+0x2b8>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	43db      	mvns	r3, r3
 8000744:	4931      	ldr	r1, [pc, #196]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000746:	4013      	ands	r3, r2
 8000748:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	492c      	ldr	r1, [pc, #176]	; (800080c <HAL_GPIO_Init+0x2b8>)
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	4313      	orrs	r3, r2
 8000760:	604b      	str	r3, [r1, #4]
 8000762:	e006      	b.n	8000772 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	43db      	mvns	r3, r3
 800076c:	4927      	ldr	r1, [pc, #156]	; (800080c <HAL_GPIO_Init+0x2b8>)
 800076e:	4013      	ands	r3, r2
 8000770:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d006      	beq.n	800078c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	4922      	ldr	r1, [pc, #136]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	4313      	orrs	r3, r2
 8000788:	608b      	str	r3, [r1, #8]
 800078a:	e006      	b.n	800079a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <HAL_GPIO_Init+0x2b8>)
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	43db      	mvns	r3, r3
 8000794:	491d      	ldr	r1, [pc, #116]	; (800080c <HAL_GPIO_Init+0x2b8>)
 8000796:	4013      	ands	r3, r2
 8000798:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d006      	beq.n	80007b4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_GPIO_Init+0x2b8>)
 80007a8:	68da      	ldr	r2, [r3, #12]
 80007aa:	4918      	ldr	r1, [pc, #96]	; (800080c <HAL_GPIO_Init+0x2b8>)
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	60cb      	str	r3, [r1, #12]
 80007b2:	e006      	b.n	80007c2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_GPIO_Init+0x2b8>)
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4913      	ldr	r1, [pc, #76]	; (800080c <HAL_GPIO_Init+0x2b8>)
 80007be:	4013      	ands	r3, r2
 80007c0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	3301      	adds	r3, #1
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	f67f aed4 	bls.w	8000578 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80007d0:	bf00      	nop
 80007d2:	372c      	adds	r7, #44	; 0x2c
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	10210000 	.word	0x10210000
 80007e0:	10110000 	.word	0x10110000
 80007e4:	10120000 	.word	0x10120000
 80007e8:	10310000 	.word	0x10310000
 80007ec:	10320000 	.word	0x10320000
 80007f0:	10220000 	.word	0x10220000
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010000 	.word	0x40010000
 80007fc:	40010800 	.word	0x40010800
 8000800:	40010c00 	.word	0x40010c00
 8000804:	40011000 	.word	0x40011000
 8000808:	40011400 	.word	0x40011400
 800080c:	40010400 	.word	0x40010400

08000810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	4013      	ands	r3, r2
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000828:	2301      	movs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e001      	b.n	8000832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	807b      	strh	r3, [r7, #2]
 800084a:	4613      	mov	r3, r2
 800084c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800084e:	787b      	ldrb	r3, [r7, #1]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d003      	beq.n	800085c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000854:	887a      	ldrh	r2, [r7, #2]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800085a:	e003      	b.n	8000864 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	041a      	lsls	r2, r3, #16
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	611a      	str	r2, [r3, #16]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 8087 	beq.w	8000998 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800088a:	4b92      	ldr	r3, [pc, #584]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 030c 	and.w	r3, r3, #12
 8000892:	2b04      	cmp	r3, #4
 8000894:	d00c      	beq.n	80008b0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000896:	4b8f      	ldr	r3, [pc, #572]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 030c 	and.w	r3, r3, #12
 800089e:	2b08      	cmp	r3, #8
 80008a0:	d112      	bne.n	80008c8 <HAL_RCC_OscConfig+0x58>
 80008a2:	4b8c      	ldr	r3, [pc, #560]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ae:	d10b      	bne.n	80008c8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b0:	4b88      	ldr	r3, [pc, #544]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d06c      	beq.n	8000996 <HAL_RCC_OscConfig+0x126>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d168      	bne.n	8000996 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e22d      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d0:	d106      	bne.n	80008e0 <HAL_RCC_OscConfig+0x70>
 80008d2:	4b80      	ldr	r3, [pc, #512]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a7f      	ldr	r2, [pc, #508]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	e02e      	b.n	800093e <HAL_RCC_OscConfig+0xce>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10c      	bne.n	8000902 <HAL_RCC_OscConfig+0x92>
 80008e8:	4b7a      	ldr	r3, [pc, #488]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a79      	ldr	r2, [pc, #484]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a76      	ldr	r2, [pc, #472]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80008fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	e01d      	b.n	800093e <HAL_RCC_OscConfig+0xce>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800090a:	d10c      	bne.n	8000926 <HAL_RCC_OscConfig+0xb6>
 800090c:	4b71      	ldr	r3, [pc, #452]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a70      	ldr	r2, [pc, #448]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b6e      	ldr	r3, [pc, #440]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a6d      	ldr	r2, [pc, #436]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 800091e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	e00b      	b.n	800093e <HAL_RCC_OscConfig+0xce>
 8000926:	4b6b      	ldr	r3, [pc, #428]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a6a      	ldr	r2, [pc, #424]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 800092c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	4b68      	ldr	r3, [pc, #416]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a67      	ldr	r2, [pc, #412]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800093c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d013      	beq.n	800096e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000946:	f7ff fc59 	bl	80001fc <HAL_GetTick>
 800094a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094c:	e008      	b.n	8000960 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094e:	f7ff fc55 	bl	80001fc <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2b64      	cmp	r3, #100	; 0x64
 800095a:	d901      	bls.n	8000960 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800095c:	2303      	movs	r3, #3
 800095e:	e1e1      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000960:	4b5c      	ldr	r3, [pc, #368]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0f0      	beq.n	800094e <HAL_RCC_OscConfig+0xde>
 800096c:	e014      	b.n	8000998 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800096e:	f7ff fc45 	bl	80001fc <HAL_GetTick>
 8000972:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000974:	e008      	b.n	8000988 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000976:	f7ff fc41 	bl	80001fc <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	2b64      	cmp	r3, #100	; 0x64
 8000982:	d901      	bls.n	8000988 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000984:	2303      	movs	r3, #3
 8000986:	e1cd      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000988:	4b52      	ldr	r3, [pc, #328]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1f0      	bne.n	8000976 <HAL_RCC_OscConfig+0x106>
 8000994:	e000      	b.n	8000998 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000996:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d063      	beq.n	8000a6c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009a4:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 030c 	and.w	r3, r3, #12
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00b      	beq.n	80009c8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009b0:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 030c 	and.w	r3, r3, #12
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	d11c      	bne.n	80009f6 <HAL_RCC_OscConfig+0x186>
 80009bc:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d116      	bne.n	80009f6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c8:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d005      	beq.n	80009e0 <HAL_RCC_OscConfig+0x170>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d001      	beq.n	80009e0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e1a1      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e0:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	4939      	ldr	r1, [pc, #228]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 80009f0:	4313      	orrs	r3, r2
 80009f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f4:	e03a      	b.n	8000a6c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d020      	beq.n	8000a40 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <HAL_RCC_OscConfig+0x268>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a04:	f7ff fbfa 	bl	80001fc <HAL_GetTick>
 8000a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0a:	e008      	b.n	8000a1e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fbf6 	bl	80001fc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d901      	bls.n	8000a1e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e182      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f0      	beq.n	8000a0c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	4926      	ldr	r1, [pc, #152]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	600b      	str	r3, [r1, #0]
 8000a3e:	e015      	b.n	8000a6c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <HAL_RCC_OscConfig+0x268>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a46:	f7ff fbd9 	bl	80001fc <HAL_GetTick>
 8000a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a4c:	e008      	b.n	8000a60 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a4e:	f7ff fbd5 	bl	80001fc <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d901      	bls.n	8000a60 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e161      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f0      	bne.n	8000a4e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d039      	beq.n	8000aec <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d019      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a86:	f7ff fbb9 	bl	80001fc <HAL_GetTick>
 8000a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8c:	e008      	b.n	8000aa0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a8e:	f7ff fbb5 	bl	80001fc <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d901      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e141      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_RCC_OscConfig+0x264>)
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f0      	beq.n	8000a8e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 fae3 	bl	8001078 <RCC_Delay>
 8000ab2:	e01b      	b.n	8000aec <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_RCC_OscConfig+0x26c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aba:	f7ff fb9f 	bl	80001fc <HAL_GetTick>
 8000abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac0:	e00e      	b.n	8000ae0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ac2:	f7ff fb9b 	bl	80001fc <HAL_GetTick>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d907      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e127      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	42420000 	.word	0x42420000
 8000adc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae0:	4b92      	ldr	r3, [pc, #584]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1ea      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 80a6 	beq.w	8000c46 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000afe:	4b8b      	ldr	r3, [pc, #556]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10d      	bne.n	8000b26 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b88      	ldr	r3, [pc, #544]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a87      	ldr	r2, [pc, #540]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b85      	ldr	r3, [pc, #532]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b22:	2301      	movs	r3, #1
 8000b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b26:	4b82      	ldr	r3, [pc, #520]	; (8000d30 <HAL_RCC_OscConfig+0x4c0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d118      	bne.n	8000b64 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b32:	4b7f      	ldr	r3, [pc, #508]	; (8000d30 <HAL_RCC_OscConfig+0x4c0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a7e      	ldr	r2, [pc, #504]	; (8000d30 <HAL_RCC_OscConfig+0x4c0>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fb5d 	bl	80001fc <HAL_GetTick>
 8000b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b44:	e008      	b.n	8000b58 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b46:	f7ff fb59 	bl	80001fc <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	2b64      	cmp	r3, #100	; 0x64
 8000b52:	d901      	bls.n	8000b58 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e0e5      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b58:	4b75      	ldr	r3, [pc, #468]	; (8000d30 <HAL_RCC_OscConfig+0x4c0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f0      	beq.n	8000b46 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d106      	bne.n	8000b7a <HAL_RCC_OscConfig+0x30a>
 8000b6c:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	4a6e      	ldr	r2, [pc, #440]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6213      	str	r3, [r2, #32]
 8000b78:	e02d      	b.n	8000bd6 <HAL_RCC_OscConfig+0x366>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x32c>
 8000b82:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	6213      	str	r3, [r2, #32]
 8000b8e:	4b67      	ldr	r3, [pc, #412]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	4a66      	ldr	r2, [pc, #408]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000b94:	f023 0304 	bic.w	r3, r3, #4
 8000b98:	6213      	str	r3, [r2, #32]
 8000b9a:	e01c      	b.n	8000bd6 <HAL_RCC_OscConfig+0x366>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d10c      	bne.n	8000bbe <HAL_RCC_OscConfig+0x34e>
 8000ba4:	4b61      	ldr	r3, [pc, #388]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	4a60      	ldr	r2, [pc, #384]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6213      	str	r3, [r2, #32]
 8000bb0:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	4a5d      	ldr	r2, [pc, #372]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6213      	str	r3, [r2, #32]
 8000bbc:	e00b      	b.n	8000bd6 <HAL_RCC_OscConfig+0x366>
 8000bbe:	4b5b      	ldr	r3, [pc, #364]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000bc0:	6a1b      	ldr	r3, [r3, #32]
 8000bc2:	4a5a      	ldr	r2, [pc, #360]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000bc4:	f023 0301 	bic.w	r3, r3, #1
 8000bc8:	6213      	str	r3, [r2, #32]
 8000bca:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000bcc:	6a1b      	ldr	r3, [r3, #32]
 8000bce:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000bd0:	f023 0304 	bic.w	r3, r3, #4
 8000bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d015      	beq.n	8000c0a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bde:	f7ff fb0d 	bl	80001fc <HAL_GetTick>
 8000be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000be4:	e00a      	b.n	8000bfc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be6:	f7ff fb09 	bl	80001fc <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d901      	bls.n	8000bfc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e093      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bfc:	4b4b      	ldr	r3, [pc, #300]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0ee      	beq.n	8000be6 <HAL_RCC_OscConfig+0x376>
 8000c08:	e014      	b.n	8000c34 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c0a:	f7ff faf7 	bl	80001fc <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c10:	e00a      	b.n	8000c28 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c12:	f7ff faf3 	bl	80001fc <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e07d      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c28:	4b40      	ldr	r3, [pc, #256]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1ee      	bne.n	8000c12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d105      	bne.n	8000c46 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c3a:	4b3c      	ldr	r3, [pc, #240]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d069      	beq.n	8000d22 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d061      	beq.n	8000d1e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d146      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <HAL_RCC_OscConfig+0x4c4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c68:	f7ff fac8 	bl	80001fc <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c70:	f7ff fac4 	bl	80001fc <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e050      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c96:	d108      	bne.n	8000caa <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4921      	ldr	r1, [pc, #132]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a19      	ldr	r1, [r3, #32]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	491b      	ldr	r1, [pc, #108]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_RCC_OscConfig+0x4c4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fa98 	bl	80001fc <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd0:	f7ff fa94 	bl	80001fc <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e020      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x460>
 8000cee:	e018      	b.n	8000d22 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_RCC_OscConfig+0x4c4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa81 	bl	80001fc <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cfe:	f7ff fa7d 	bl	80001fc <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e009      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f0      	bne.n	8000cfe <HAL_RCC_OscConfig+0x48e>
 8000d1c:	e001      	b.n	8000d22 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40007000 	.word	0x40007000
 8000d34:	42420060 	.word	0x42420060

08000d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d46:	4b7e      	ldr	r3, [pc, #504]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d910      	bls.n	8000d76 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d54:	4b7a      	ldr	r3, [pc, #488]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 0207 	bic.w	r2, r3, #7
 8000d5c:	4978      	ldr	r1, [pc, #480]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d64:	4b76      	ldr	r3, [pc, #472]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e0e0      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d020      	beq.n	8000dc4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d8e:	4b6d      	ldr	r3, [pc, #436]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	4a6c      	ldr	r2, [pc, #432]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000d94:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d98:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000da6:	4b67      	ldr	r3, [pc, #412]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4a66      	ldr	r2, [pc, #408]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000dac:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000db0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db2:	4b64      	ldr	r3, [pc, #400]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	4961      	ldr	r1, [pc, #388]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d06a      	beq.n	8000ea6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d107      	bne.n	8000de8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd8:	4b5a      	ldr	r3, [pc, #360]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d115      	bne.n	8000e10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e0a7      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d107      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000df0:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e09b      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e093      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e10:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f023 0203 	bic.w	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4949      	ldr	r1, [pc, #292]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e22:	f7ff f9eb 	bl	80001fc <HAL_GetTick>
 8000e26:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d112      	bne.n	8000e56 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e30:	e00a      	b.n	8000e48 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e32:	f7ff f9e3 	bl	80001fc <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e077      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e48:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d1ee      	bne.n	8000e32 <HAL_RCC_ClockConfig+0xfa>
 8000e54:	e027      	b.n	8000ea6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d11d      	bne.n	8000e9a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e5e:	e00a      	b.n	8000e76 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e60:	f7ff f9cc 	bl	80001fc <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e060      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d1ee      	bne.n	8000e60 <HAL_RCC_ClockConfig+0x128>
 8000e82:	e010      	b.n	8000ea6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e84:	f7ff f9ba 	bl	80001fc <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e04e      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1ee      	bne.n	8000e84 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d210      	bcs.n	8000ed6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 0207 	bic.w	r2, r3, #7
 8000ebc:	4920      	ldr	r1, [pc, #128]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <HAL_RCC_ClockConfig+0x208>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d001      	beq.n	8000ed6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e030      	b.n	8000f38 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	4915      	ldr	r1, [pc, #84]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d009      	beq.n	8000f14 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f14:	f000 f81c 	bl	8000f50 <HAL_RCC_GetSysClockFreq>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_RCC_ClockConfig+0x20c>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_RCC_ClockConfig+0x210>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_RCC_ClockConfig+0x214>)
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff f921 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40022000 	.word	0x40022000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	08003a78 	.word	0x08003a78
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f50:	b490      	push	{r4, r7}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f58:	1d3c      	adds	r4, r7, #4
 8000f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d002      	beq.n	8000f90 <HAL_RCC_GetSysClockFreq+0x40>
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d003      	beq.n	8000f96 <HAL_RCC_GetSysClockFreq+0x46>
 8000f8e:	e02d      	b.n	8000fec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f92:	623b      	str	r3, [r7, #32]
      break;
 8000f94:	e02d      	b.n	8000ff2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	0c9b      	lsrs	r3, r3, #18
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fa8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d013      	beq.n	8000fdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	0c5b      	lsrs	r3, r3, #17
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fc8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fce:	fb02 f203 	mul.w	r2, r2, r3
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fda:	e004      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	623b      	str	r3, [r7, #32]
      break;
 8000fea:	e002      	b.n	8000ff2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fee:	623b      	str	r3, [r7, #32]
      break;
 8000ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc90      	pop	{r4, r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	08003a64 	.word	0x08003a64
 8001004:	08003a74 	.word	0x08003a74
 8001008:	40021000 	.word	0x40021000
 800100c:	007a1200 	.word	0x007a1200
 8001010:	003d0900 	.word	0x003d0900

08001014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_RCC_GetHCLKFreq+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800102c:	f7ff fff2 	bl	8001014 <HAL_RCC_GetHCLKFreq>
 8001030:	4601      	mov	r1, r0
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	4a03      	ldr	r2, [pc, #12]	; (800104c <HAL_RCC_GetPCLK1Freq+0x24>)
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	08003a88 	.word	0x08003a88

08001050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001054:	f7ff ffde 	bl	8001014 <HAL_RCC_GetHCLKFreq>
 8001058:	4601      	mov	r1, r0
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	0adb      	lsrs	r3, r3, #11
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	4a03      	ldr	r2, [pc, #12]	; (8001074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800106c:	4618      	mov	r0, r3
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	08003a88 	.word	0x08003a88

08001078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <RCC_Delay+0x34>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <RCC_Delay+0x38>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0a5b      	lsrs	r3, r3, #9
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001094:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1e5a      	subs	r2, r3, #1
 800109a:	60fa      	str	r2, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f9      	bne.n	8001094 <RCC_Delay+0x1c>
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	10624dd3 	.word	0x10624dd3

080010b4 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e01d      	b.n	8001102 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f002 faa0 	bl	8003620 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2202      	movs	r2, #2
 80010e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3304      	adds	r3, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f000 fa2a 	bl	800154c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0201 	orr.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b02      	cmp	r3, #2
 8001152:	d122      	bne.n	800119a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b02      	cmp	r3, #2
 8001160:	d11b      	bne.n	800119a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f06f 0202 	mvn.w	r2, #2
 800116a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f9c8 	bl	8001516 <HAL_TIM_IC_CaptureCallback>
 8001186:	e005      	b.n	8001194 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f9bb 	bl	8001504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f9ca 	bl	8001528 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d122      	bne.n	80011ee <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d11b      	bne.n	80011ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f06f 0204 	mvn.w	r2, #4
 80011be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2202      	movs	r2, #2
 80011c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f99e 	bl	8001516 <HAL_TIM_IC_CaptureCallback>
 80011da:	e005      	b.n	80011e8 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f991 	bl	8001504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f9a0 	bl	8001528 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d122      	bne.n	8001242 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b08      	cmp	r3, #8
 8001208:	d11b      	bne.n	8001242 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f06f 0208 	mvn.w	r2, #8
 8001212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2204      	movs	r2, #4
 8001218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f974 	bl	8001516 <HAL_TIM_IC_CaptureCallback>
 800122e:	e005      	b.n	800123c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f967 	bl	8001504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f976 	bl	8001528 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b10      	cmp	r3, #16
 800124e:	d122      	bne.n	8001296 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b10      	cmp	r3, #16
 800125c:	d11b      	bne.n	8001296 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0210 	mvn.w	r2, #16
 8001266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2208      	movs	r2, #8
 800126c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f94a 	bl	8001516 <HAL_TIM_IC_CaptureCallback>
 8001282:	e005      	b.n	8001290 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f93d 	bl	8001504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f94c 	bl	8001528 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10e      	bne.n	80012c2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f06f 0201 	mvn.w	r2, #1
 80012ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f001 f97f 	bl	80025c0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012cc:	2b80      	cmp	r3, #128	; 0x80
 80012ce:	d10e      	bne.n	80012ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	2b80      	cmp	r3, #128	; 0x80
 80012dc:	d107      	bne.n	80012ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fa87 	bl	80017fc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f8:	2b40      	cmp	r3, #64	; 0x40
 80012fa:	d10e      	bne.n	800131a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	2b40      	cmp	r3, #64	; 0x40
 8001308:	d107      	bne.n	800131a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001312:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f910 	bl	800153a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b20      	cmp	r3, #32
 8001326:	d10e      	bne.n	8001346 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	2b20      	cmp	r3, #32
 8001334:	d107      	bne.n	8001346 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f06f 0220 	mvn.w	r2, #32
 800133e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fa52 	bl	80017ea <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_TIM_ConfigClockSource+0x1c>
 8001366:	2302      	movs	r3, #2
 8001368:	e0c8      	b.n	80014fc <HAL_TIM_ConfigClockSource+0x1ae>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2202      	movs	r2, #2
 8001376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001388:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001390:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b40      	cmp	r3, #64	; 0x40
 80013a0:	d077      	beq.n	8001492 <HAL_TIM_ConfigClockSource+0x144>
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	d80e      	bhi.n	80013c4 <HAL_TIM_ConfigClockSource+0x76>
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	f000 808a 	beq.w	80014c0 <HAL_TIM_ConfigClockSource+0x172>
 80013ac:	2b10      	cmp	r3, #16
 80013ae:	d802      	bhi.n	80013b6 <HAL_TIM_ConfigClockSource+0x68>
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d07e      	beq.n	80014b2 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80013b4:	e099      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	f000 8089 	beq.w	80014ce <HAL_TIM_ConfigClockSource+0x180>
 80013bc:	2b30      	cmp	r3, #48	; 0x30
 80013be:	f000 808d 	beq.w	80014dc <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80013c2:	e092      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80013c4:	2b70      	cmp	r3, #112	; 0x70
 80013c6:	d016      	beq.n	80013f6 <HAL_TIM_ConfigClockSource+0xa8>
 80013c8:	2b70      	cmp	r3, #112	; 0x70
 80013ca:	d804      	bhi.n	80013d6 <HAL_TIM_ConfigClockSource+0x88>
 80013cc:	2b50      	cmp	r3, #80	; 0x50
 80013ce:	d040      	beq.n	8001452 <HAL_TIM_ConfigClockSource+0x104>
 80013d0:	2b60      	cmp	r3, #96	; 0x60
 80013d2:	d04e      	beq.n	8001472 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80013d4:	e089      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80013d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013da:	d003      	beq.n	80013e4 <HAL_TIM_ConfigClockSource+0x96>
 80013dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013e0:	d024      	beq.n	800142c <HAL_TIM_ConfigClockSource+0xde>
    break;
 80013e2:	e082      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0207 	bic.w	r2, r2, #7
 80013f2:	609a      	str	r2, [r3, #8]
    break;
 80013f4:	e079      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6899      	ldr	r1, [r3, #8]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f000 f98b 	bl	8001720 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001418:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001420:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	609a      	str	r2, [r3, #8]
    break;
 800142a:	e05e      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6899      	ldr	r1, [r3, #8]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f000 f970 	bl	8001720 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800144e:	609a      	str	r2, [r3, #8]
    break;
 8001450:	e04b      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6859      	ldr	r1, [r3, #4]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	461a      	mov	r2, r3
 8001460:	f000 f8da 	bl	8001618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2150      	movs	r1, #80	; 0x50
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f939 	bl	80016e2 <TIM_ITRx_SetConfig>
    break;
 8001470:	e03b      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	461a      	mov	r2, r3
 8001480:	f000 f8fc 	bl	800167c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2160      	movs	r1, #96	; 0x60
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f929 	bl	80016e2 <TIM_ITRx_SetConfig>
    break;
 8001490:	e02b      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	461a      	mov	r2, r3
 80014a0:	f000 f8ba 	bl	8001618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f919 	bl	80016e2 <TIM_ITRx_SetConfig>
    break;
 80014b0:	e01b      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f912 	bl	80016e2 <TIM_ITRx_SetConfig>
    break;
 80014be:	e014      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2110      	movs	r1, #16
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f90b 	bl	80016e2 <TIM_ITRx_SetConfig>
    break;
 80014cc:	e00d      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2120      	movs	r1, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f904 	bl	80016e2 <TIM_ITRx_SetConfig>
    break;
 80014da:	e006      	b.n	80014ea <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2130      	movs	r1, #48	; 0x30
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f8fd 	bl	80016e2 <TIM_ITRx_SetConfig>
    break;
 80014e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a2a      	ldr	r2, [pc, #168]	; (800160c <TIM_Base_SetConfig+0xc0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00b      	beq.n	8001580 <TIM_Base_SetConfig+0x34>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156e:	d007      	beq.n	8001580 <TIM_Base_SetConfig+0x34>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a27      	ldr	r2, [pc, #156]	; (8001610 <TIM_Base_SetConfig+0xc4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d003      	beq.n	8001580 <TIM_Base_SetConfig+0x34>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a26      	ldr	r2, [pc, #152]	; (8001614 <TIM_Base_SetConfig+0xc8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d108      	bne.n	8001592 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <TIM_Base_SetConfig+0xc0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00b      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a0:	d007      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <TIM_Base_SetConfig+0xc4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d003      	beq.n	80015b2 <TIM_Base_SetConfig+0x66>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <TIM_Base_SetConfig+0xc8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d108      	bne.n	80015c4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ca:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <TIM_Base_SetConfig+0xc0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d103      	bne.n	80015fc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	615a      	str	r2, [r3, #20]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40012c00 	.word	0x40012c00
 8001610:	40000400 	.word	0x40000400
 8001614:	40000800 	.word	0x40000800

08001618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	f023 0201 	bic.w	r2, r3, #1
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800164a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	4313      	orrs	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f023 030a 	bic.w	r3, r3, #10
 800165c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	621a      	str	r2, [r3, #32]
}
 8001672:	bf00      	nop
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f023 0210 	bic.w	r2, r3, #16
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80016ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	031b      	lsls	r3, r3, #12
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80016c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	621a      	str	r2, [r3, #32]
}
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fe:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	f043 0307 	orr.w	r3, r3, #7
 8001706:	b29b      	uxth	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	609a      	str	r2, [r3, #8]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800173e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	021a      	lsls	r2, r3, #8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	431a      	orrs	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	609a      	str	r2, [r3, #8]
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001776:	2302      	movs	r3, #2
 8001778:	e032      	b.n	80017e0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001798:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ba:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6899      	ldr	r1, [r3, #8]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e03f      	b.n	80018a0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f001 ff17 	bl	8003668 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2224      	movs	r2, #36	; 0x24
 800183e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001850:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 faee 	bl	8001e34 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001866:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001876:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001886:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2220      	movs	r2, #32
 8001892:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d130      	bne.n	8001924 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_UART_Transmit_IT+0x26>
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e029      	b.n	8001926 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_UART_Transmit_IT+0x38>
 80018dc:	2302      	movs	r3, #2
 80018de:	e022      	b.n	8001926 <HAL_UART_Transmit_IT+0x7e>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	88fa      	ldrh	r2, [r7, #6]
 80018f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2221      	movs	r2, #33	; 0x21
 8001904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800191e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b20      	cmp	r3, #32
 8001948:	d140      	bne.n	80019cc <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <HAL_UART_Receive_IT+0x26>
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e039      	b.n	80019ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_UART_Receive_IT+0x38>
 8001964:	2302      	movs	r3, #2
 8001966:	e032      	b.n	80019ce <HAL_UART_Receive_IT+0x9e>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2222      	movs	r2, #34	; 0x22
 800198c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e000      	b.n	80019ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
  }
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_UART_IRQHandler+0x52>
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f984 	bl	8001d30 <UART_Receive_IT>
      return;
 8001a28:	e0cc      	b.n	8001bc4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80ab 	beq.w	8001b88 <HAL_UART_IRQHandler+0x1b0>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_UART_IRQHandler+0x70>
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 80a0 	beq.w	8001b88 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <HAL_UART_IRQHandler+0x90>
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <HAL_UART_IRQHandler+0xb0>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	f043 0202 	orr.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <HAL_UART_IRQHandler+0xd0>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_UART_IRQHandler+0xf0>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	f043 0208 	orr.w	r2, r3, #8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d078      	beq.n	8001bc2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_UART_IRQHandler+0x112>
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f923 	bl	8001d30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <HAL_UART_IRQHandler+0x13a>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d031      	beq.n	8001b76 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f86e 	bl	8001bf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d023      	beq.n	8001b6e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d013      	beq.n	8001b66 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b42:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_UART_IRQHandler+0x1f4>)
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fc8c 	bl	8000468 <HAL_DMA_Abort_IT>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d016      	beq.n	8001b84 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b60:	4610      	mov	r0, r2
 8001b62:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b64:	e00e      	b.n	8001b84 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f83b 	bl	8001be2 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b6c:	e00a      	b.n	8001b84 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f837 	bl	8001be2 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b74:	e006      	b.n	8001b84 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f833 	bl	8001be2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001b82:	e01e      	b.n	8001bc2 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b84:	bf00      	nop
    return;
 8001b86:	e01c      	b.n	8001bc2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_UART_IRQHandler+0x1cc>
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f85a 	bl	8001c56 <UART_Transmit_IT>
    return;
 8001ba2:	e00f      	b.n	8001bc4 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x1ec>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8a1 	bl	8001d00 <UART_EndTransmit_IT>
    return;
 8001bbe:	bf00      	nop
 8001bc0:	e000      	b.n	8001bc4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001bc2:	bf00      	nop
  }
}
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08001c2f 	.word	0x08001c2f

08001bd0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff ffca 	bl	8001be2 <HAL_UART_ErrorCallback>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b21      	cmp	r3, #33	; 0x21
 8001c68:	d144      	bne.n	8001cf4 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c72:	d11a      	bne.n	8001caa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c88:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	1c9a      	adds	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	621a      	str	r2, [r3, #32]
 8001c9c:	e00e      	b.n	8001cbc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	621a      	str	r2, [r3, #32]
 8001ca8:	e008      	b.n	8001cbc <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	1c59      	adds	r1, r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6211      	str	r1, [r2, #32]
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10f      	bne.n	8001cf0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d16:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff55 	bl	8001bd0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b22      	cmp	r3, #34	; 0x22
 8001d42:	d171      	bne.n	8001e28 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4c:	d123      	bne.n	8001d96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10e      	bne.n	8001d7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	1c9a      	adds	r2, r3, #2
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
 8001d78:	e029      	b.n	8001dce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
 8001d94:	e01b      	b.n	8001dce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6858      	ldr	r0, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6291      	str	r1, [r2, #40]	; 0x28
 8001dae:	b2c2      	uxtb	r2, r0
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e00c      	b.n	8001dce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	1c58      	adds	r0, r3, #1
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	6288      	str	r0, [r1, #40]	; 0x28
 8001dc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d120      	bne.n	8001e24 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0220 	bic.w	r2, r2, #32
 8001df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e00:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fb64 	bl	80024e8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e002      	b.n	8001e2a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e76:	f023 030c 	bic.w	r3, r3, #12
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	68f9      	ldr	r1, [r7, #12]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6f      	ldr	r2, [pc, #444]	; (800205c <UART_SetConfig+0x228>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d16b      	bne.n	8001f7c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ea4:	f7ff f8d4 	bl	8001050 <HAL_RCC_GetPCLK2Freq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	009a      	lsls	r2, r3, #2
 8001eb2:	441a      	add	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4a68      	ldr	r2, [pc, #416]	; (8002060 <UART_SetConfig+0x22c>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	011c      	lsls	r4, r3, #4
 8001ec8:	f7ff f8c2 	bl	8001050 <HAL_RCC_GetPCLK2Freq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009a      	lsls	r2, r3, #2
 8001ed6:	441a      	add	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ee2:	f7ff f8b5 	bl	8001050 <HAL_RCC_GetPCLK2Freq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	009a      	lsls	r2, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <UART_SetConfig+0x22c>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2264      	movs	r2, #100	; 0x64
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	1aeb      	subs	r3, r5, r3
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	3332      	adds	r3, #50	; 0x32
 8001f10:	4a53      	ldr	r2, [pc, #332]	; (8002060 <UART_SetConfig+0x22c>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1c:	441c      	add	r4, r3
 8001f1e:	f7ff f897 	bl	8001050 <HAL_RCC_GetPCLK2Freq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	009a      	lsls	r2, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f38:	f7ff f88a 	bl	8001050 <HAL_RCC_GetPCLK2Freq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	009a      	lsls	r2, r3, #2
 8001f46:	441a      	add	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4a43      	ldr	r2, [pc, #268]	; (8002060 <UART_SetConfig+0x22c>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	2264      	movs	r2, #100	; 0x64
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	1aeb      	subs	r3, r5, r3
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	3332      	adds	r3, #50	; 0x32
 8001f66:	4a3e      	ldr	r2, [pc, #248]	; (8002060 <UART_SetConfig+0x22c>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	f003 020f 	and.w	r2, r3, #15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4422      	add	r2, r4
 8001f78:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001f7a:	e06a      	b.n	8002052 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f7c:	f7ff f854 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	009a      	lsls	r2, r3, #2
 8001f8a:	441a      	add	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4a32      	ldr	r2, [pc, #200]	; (8002060 <UART_SetConfig+0x22c>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	011c      	lsls	r4, r3, #4
 8001fa0:	f7ff f842 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	009a      	lsls	r2, r3, #2
 8001fae:	441a      	add	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8001fba:	f7ff f835 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009a      	lsls	r2, r3, #2
 8001fc8:	441a      	add	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <UART_SetConfig+0x22c>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2264      	movs	r2, #100	; 0x64
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	1aeb      	subs	r3, r5, r3
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	3332      	adds	r3, #50	; 0x32
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <UART_SetConfig+0x22c>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	441c      	add	r4, r3
 8001ff6:	f7ff f817 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009a      	lsls	r2, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002010:	f7ff f80a 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
 8002014:	4602      	mov	r2, r0
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009a      	lsls	r2, r3, #2
 800201e:	441a      	add	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <UART_SetConfig+0x22c>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	2264      	movs	r2, #100	; 0x64
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	1aeb      	subs	r3, r5, r3
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	3332      	adds	r3, #50	; 0x32
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <UART_SetConfig+0x22c>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	f003 020f 	and.w	r2, r3, #15
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4422      	add	r2, r4
 8002050:	609a      	str	r2, [r3, #8]
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bdb0      	pop	{r4, r5, r7, pc}
 800205a:	bf00      	nop
 800205c:	40013800 	.word	0x40013800
 8002060:	51eb851f 	.word	0x51eb851f

08002064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002068:	f7fe f870 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206c:	f000 f8e0 	bl	8002230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002070:	f000 f99a 	bl	80023a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002074:	f000 f922 	bl	80022bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002078:	f000 f96c 	bl	8002354 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Prearo interrupcion para la recepcion, solo sirve para una vez
  HAL_UART_Receive_IT(&huart1, (uint8_t*)a_rx, sizeof(a_rx));
 800207c:	2201      	movs	r2, #1
 800207e:	4960      	ldr	r1, [pc, #384]	; (8002200 <main+0x19c>)
 8002080:	4860      	ldr	r0, [pc, #384]	; (8002204 <main+0x1a0>)
 8002082:	f7ff fc55 	bl	8001930 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8002086:	4860      	ldr	r0, [pc, #384]	; (8002208 <main+0x1a4>)
 8002088:	f7ff f83f 	bl	800110a <HAL_TIM_Base_Start_IT>

  //Apago el led de la palca y en el frente
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, 1);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002092:	485e      	ldr	r0, [pc, #376]	; (800220c <main+0x1a8>)
 8002094:	f7fe fbd3 	bl	800083e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	485c      	ldr	r0, [pc, #368]	; (8002210 <main+0x1ac>)
 800209e:	f7fe fbce 	bl	800083e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	485a      	ldr	r0, [pc, #360]	; (8002210 <main+0x1ac>)
 80020a8:	f7fe fbc9 	bl	800083e <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit_IT(&huart1, (uint8_t*) &caracter, sizeof(caracter));
	  switch(estado)
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <main+0x1b0>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <main+0x56>
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d025      	beq.n	8002104 <main+0xa0>
 80020b8:	e7f8      	b.n	80020ac <main+0x48>
	  {
		  case 0:	//espera recepción, valida, y pasa
		  {
			  if(f_tc==1)	//Si se completó una trama
 80020ba:	4b57      	ldr	r3, [pc, #348]	; (8002218 <main+0x1b4>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	f040 809b 	bne.w	80021fa <main+0x196>
			  {
				  Limpia_Recep();	//Limpio el vector de recepción y reseteo las variables
 80020c4:	f000 faac 	bl	8002620 <Limpia_Recep>
				  Error_cksum=Valida_Cksum(); //Valido trama analizo checksum
 80020c8:	f000 fb06 	bl	80026d8 <Valida_Cksum>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b52      	ldr	r3, [pc, #328]	; (800221c <main+0x1b8>)
 80020d2:	701a      	strb	r2, [r3, #0]

				  //Si el cksum esta ok, valido la trama y sigo, si hay error en cksum ignoro la trama
				  if(Error_cksum==0 && v_pr[8]==ID1 && v_pr[9]==ID2 && v_pr[10]==ID3)
 80020d4:	4b51      	ldr	r3, [pc, #324]	; (800221c <main+0x1b8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10f      	bne.n	80020fc <main+0x98>
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <main+0x1bc>)
 80020de:	7a1b      	ldrb	r3, [r3, #8]
 80020e0:	2b50      	cmp	r3, #80	; 0x50
 80020e2:	d10b      	bne.n	80020fc <main+0x98>
 80020e4:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <main+0x1bc>)
 80020e6:	7a5b      	ldrb	r3, [r3, #9]
 80020e8:	2b41      	cmp	r3, #65	; 0x41
 80020ea:	d107      	bne.n	80020fc <main+0x98>
 80020ec:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <main+0x1bc>)
 80020ee:	7a9b      	ldrb	r3, [r3, #10]
 80020f0:	2b54      	cmp	r3, #84	; 0x54
 80020f2:	d103      	bne.n	80020fc <main+0x98>
				  {
					  estado=1; //Si es para mi y cksum ok, avanzo
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <main+0x1b0>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
				  {
					  estado=0;
				  }
			  }
		  } //Fin case 0
		  break;
 80020fa:	e07e      	b.n	80021fa <main+0x196>
					  estado=0;
 80020fc:	4b45      	ldr	r3, [pc, #276]	; (8002214 <main+0x1b0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
		  break;
 8002102:	e07a      	b.n	80021fa <main+0x196>

		  case 1: //Envía respuesta al mensaje recibido y ejecuta
		  {
			  //Lee lo que tiene la trama y guarda los valores en las variables correspondientes
			  //Si hay error de contenido lo reporta
			  Error_rx=Lectura_Trama();
 8002104:	f000 fb26 	bl	8002754 <Lectura_Trama>
 8002108:	4603      	mov	r3, r0
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <main+0x1c0>)
 800210e:	701a      	strb	r2, [r3, #0]

			  //Simulo errores solo si o hubo errores
			  if(Error_rx==0) Error_rx=Valida_Entradas();
 8002110:	4b44      	ldr	r3, [pc, #272]	; (8002224 <main+0x1c0>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <main+0xc0>
 8002118:	f001 f9f8 	bl	800350c <Valida_Entradas>
 800211c:	4603      	mov	r3, r0
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b40      	ldr	r3, [pc, #256]	; (8002224 <main+0x1c0>)
 8002122:	701a      	strb	r2, [r3, #0]

			  //Si no hay error en la trama
			  if(Error_rx==0)
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <main+0x1c0>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d154      	bne.n	80021d6 <main+0x172>
			  {
				  if (inst==1) //Marcha
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <main+0x1c4>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d117      	bne.n	8002164 <main+0x100>
				  {
					  //Prendo led testigo de la placa y en el frente
					  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213a:	4834      	ldr	r0, [pc, #208]	; (800220c <main+0x1a8>)
 800213c:	f7fe fb7f 	bl	800083e <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	2140      	movs	r1, #64	; 0x40
 8002144:	4832      	ldr	r0, [pc, #200]	; (8002210 <main+0x1ac>)
 8002146:	f7fe fb7a 	bl	800083e <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	4830      	ldr	r0, [pc, #192]	; (8002210 <main+0x1ac>)
 8002150:	f7fe fb75 	bl	800083e <HAL_GPIO_WritePin>

					  //Envía marcha al generador con los valores recibidos
					  Genera_Trama_ACK_ERROR();
 8002154:	f000 fbae 	bl	80028b4 <Genera_Trama_ACK_ERROR>
					  Envio_tx();
 8002158:	f001 fa04 	bl	8003564 <Envio_tx>

					  f_mar=1; //Flag para saber si está funcionando
 800215c:	4b33      	ldr	r3, [pc, #204]	; (800222c <main+0x1c8>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	e042      	b.n	80021ea <main+0x186>
				  }
				  else if (inst==2)	//Parada
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <main+0x1c4>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d10d      	bne.n	8002188 <main+0x124>
				  {
					  //Apago led testigo
					  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, 1);
 800216c:	2201      	movs	r2, #1
 800216e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002172:	4826      	ldr	r0, [pc, #152]	; (800220c <main+0x1a8>)
 8002174:	f7fe fb63 	bl	800083e <HAL_GPIO_WritePin>
					  //Envía marcha al generador con los valores recibidos
					  Genera_Trama_ACK_ERROR();
 8002178:	f000 fb9c 	bl	80028b4 <Genera_Trama_ACK_ERROR>
					  Envio_tx();
 800217c:	f001 f9f2 	bl	8003564 <Envio_tx>
					  f_mar=0; //Flag para saber si está funcionando
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <main+0x1c8>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e030      	b.n	80021ea <main+0x186>

				  }
				  else if (inst==3)//Pide estado
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <main+0x1c4>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d12c      	bne.n	80021ea <main+0x186>
				  {
					  //Si hacemos que pida valores es ahora
					  if(f_mar==0)
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <main+0x1c8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d117      	bne.n	80021c8 <main+0x164>
					  {
						  //Apago led testigo de la placa y en el frente
						  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, 1);
 8002198:	2201      	movs	r2, #1
 800219a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219e:	481b      	ldr	r0, [pc, #108]	; (800220c <main+0x1a8>)
 80021a0:	f7fe fb4d 	bl	800083e <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2140      	movs	r1, #64	; 0x40
 80021a8:	4819      	ldr	r0, [pc, #100]	; (8002210 <main+0x1ac>)
 80021aa:	f7fe fb48 	bl	800083e <HAL_GPIO_WritePin>
						  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	4817      	ldr	r0, [pc, #92]	; (8002210 <main+0x1ac>)
 80021b4:	f7fe fb43 	bl	800083e <HAL_GPIO_WritePin>

						  Error_rx=2;	//Si pide con el equipo apagado manda error 2
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <main+0x1c0>)
 80021ba:	2202      	movs	r2, #2
 80021bc:	701a      	strb	r2, [r3, #0]
						  Genera_Trama_ACK_ERROR();
 80021be:	f000 fb79 	bl	80028b4 <Genera_Trama_ACK_ERROR>
						  Envio_tx();
 80021c2:	f001 f9cf 	bl	8003564 <Envio_tx>
 80021c6:	e010      	b.n	80021ea <main+0x186>
					  }
					  else
					  {
						  //Genero los valores medidos y los envío
						  Genera_Valores_RLT();
 80021c8:	f000 fdd8 	bl	8002d7c <Genera_Valores_RLT>
						  Genera_Trama_RLT();
 80021cc:	f000 fc3c 	bl	8002a48 <Genera_Trama_RLT>
						  Envio_tx();
 80021d0:	f001 f9c8 	bl	8003564 <Envio_tx>
 80021d4:	e009      	b.n	80021ea <main+0x186>

			  //Si hay error en la trama
			  else
			  {
				  //Apago led testigo
				  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, 1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021dc:	480b      	ldr	r0, [pc, #44]	; (800220c <main+0x1a8>)
 80021de:	f7fe fb2e 	bl	800083e <HAL_GPIO_WritePin>

				  //Reporta
				  Genera_Trama_ACK_ERROR();
 80021e2:	f000 fb67 	bl	80028b4 <Genera_Trama_ACK_ERROR>
				  Envio_tx();
 80021e6:	f001 f9bd 	bl	8003564 <Envio_tx>
			  }

			  //Prepara para volver a recibir
			  Limpia_Recep();
 80021ea:	f000 fa19 	bl	8002620 <Limpia_Recep>
			  Limpia_Pr();
 80021ee:	f000 fa55 	bl	800269c <Limpia_Pr>
			  estado=0;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <main+0x1b0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]

		  } //Fin case 1
		  break;
 80021f8:	e000      	b.n	80021fc <main+0x198>
		  break;
 80021fa:	bf00      	nop
	  switch(estado)
 80021fc:	e756      	b.n	80020ac <main+0x48>
 80021fe:	bf00      	nop
 8002200:	200001bc 	.word	0x200001bc
 8002204:	200002cc 	.word	0x200002cc
 8002208:	20000490 	.word	0x20000490
 800220c:	40011000 	.word	0x40011000
 8002210:	40010800 	.word	0x40010800
 8002214:	20000095 	.word	0x20000095
 8002218:	20000092 	.word	0x20000092
 800221c:	20000094 	.word	0x20000094
 8002220:	200000b0 	.word	0x200000b0
 8002224:	20000093 	.word	0x20000093
 8002228:	20000096 	.word	0x20000096
 800222c:	20000097 	.word	0x20000097

08002230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b090      	sub	sp, #64	; 0x40
 8002234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002236:	f107 0318 	add.w	r3, r7, #24
 800223a:	2228      	movs	r2, #40	; 0x28
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f001 fb54 	bl	80038ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002260:	2301      	movs	r3, #1
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002264:	2302      	movs	r3, #2
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800226e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002274:	f107 0318 	add.w	r3, r7, #24
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe faf9 	bl	8000870 <HAL_RCC_OscConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002284:	f001 f994 	bl	80035b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002288:	230f      	movs	r3, #15
 800228a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800228c:	2302      	movs	r3, #2
 800228e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2102      	movs	r1, #2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fd48 	bl	8000d38 <HAL_RCC_ClockConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80022ae:	f001 f97f 	bl	80035b0 <Error_Handler>
  }
}
 80022b2:	bf00      	nop
 80022b4:	3740      	adds	r7, #64	; 0x40
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d0:	463b      	mov	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <MX_TIM2_Init+0x94>)
 80022da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <MX_TIM2_Init+0x94>)
 80022e2:	2232      	movs	r2, #50	; 0x32
 80022e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MX_TIM2_Init+0x94>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <MX_TIM2_Init+0x94>)
 80022ee:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80022f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <MX_TIM2_Init+0x94>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <MX_TIM2_Init+0x94>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002300:	4813      	ldr	r0, [pc, #76]	; (8002350 <MX_TIM2_Init+0x94>)
 8002302:	f7fe fed7 	bl	80010b4 <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800230c:	f001 f950 	bl	80035b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4619      	mov	r1, r3
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <MX_TIM2_Init+0x94>)
 800231e:	f7ff f816 	bl	800134e <HAL_TIM_ConfigClockSource>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002328:	f001 f942 	bl	80035b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002334:	463b      	mov	r3, r7
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_TIM2_Init+0x94>)
 800233a:	f7ff fa12 	bl	8001762 <HAL_TIMEx_MasterConfigSynchronization>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002344:	f001 f934 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000490 	.word	0x20000490

08002354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <MX_USART1_UART_Init+0x50>)
 800235c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 8002360:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_USART1_UART_Init+0x4c>)
 800238c:	f7ff fa3f 	bl	800180e <HAL_UART_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002396:	f001 f90b 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200002cc 	.word	0x200002cc
 80023a4:	40013800 	.word	0x40013800

080023a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a45      	ldr	r2, [pc, #276]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023c2:	f043 0310 	orr.w	r3, r3, #16
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023da:	f043 0320 	orr.w	r3, r3, #32
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a39      	ldr	r2, [pc, #228]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <MX_GPIO_Init+0x130>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <MX_GPIO_Init+0x130>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a33      	ldr	r2, [pc, #204]	; (80024d8 <MX_GPIO_Init+0x130>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <MX_GPIO_Init+0x130>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002422:	482e      	ldr	r0, [pc, #184]	; (80024dc <MX_GPIO_Init+0x134>)
 8002424:	f7fe fa0b 	bl	800083e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D2_Pin|D3_Pin|D4_Pin 
 8002428:	2200      	movs	r2, #0
 800242a:	f640 01cf 	movw	r1, #2255	; 0x8cf
 800242e:	482c      	ldr	r0, [pc, #176]	; (80024e0 <MX_GPIO_Init+0x138>)
 8002430:	f7fe fa05 	bl	800083e <HAL_GPIO_WritePin>
                          |LED_V_Pin|LED_R_Pin|HAB_Tx_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BCD_Out_D_Pin|BCD_Out_C_Pin|BCD_Out_B_Pin|BCD_Out_A_Pin, GPIO_PIN_RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	f640 4103 	movw	r1, #3075	; 0xc03
 800243a:	482a      	ldr	r0, [pc, #168]	; (80024e4 <MX_GPIO_Init+0x13c>)
 800243c:	f7fe f9ff 	bl	800083e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Test_Pin */
  GPIO_InitStruct.Pin = Test_Pin;
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2302      	movs	r3, #2
 8002450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Test_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4619      	mov	r1, r3
 8002458:	4820      	ldr	r0, [pc, #128]	; (80024dc <MX_GPIO_Init+0x134>)
 800245a:	f7fe f87b 	bl	8000554 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin D4_Pin 
                           LED_V_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin|D4_Pin 
 800245e:	23cf      	movs	r3, #207	; 0xcf
 8002460:	613b      	str	r3, [r7, #16]
                          |LED_V_Pin|LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2302      	movs	r3, #2
 800246c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 0310 	add.w	r3, r7, #16
 8002472:	4619      	mov	r1, r3
 8002474:	481a      	ldr	r0, [pc, #104]	; (80024e0 <MX_GPIO_Init+0x138>)
 8002476:	f7fe f86d 	bl	8000554 <HAL_GPIO_Init>

  /*Configure GPIO pins : BCD_Out_D_Pin BCD_Out_C_Pin BCD_Out_B_Pin BCD_Out_A_Pin */
  GPIO_InitStruct.Pin = BCD_Out_D_Pin|BCD_Out_C_Pin|BCD_Out_B_Pin|BCD_Out_A_Pin;
 800247a:	f640 4303 	movw	r3, #3075	; 0xc03
 800247e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002480:	2301      	movs	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2302      	movs	r3, #2
 800248a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4619      	mov	r1, r3
 8002492:	4814      	ldr	r0, [pc, #80]	; (80024e4 <MX_GPIO_Init+0x13c>)
 8002494:	f7fe f85e 	bl	8000554 <HAL_GPIO_Init>

  /*Configure GPIO pins : BCD_In_A_Pin BCD_In_B_Pin BCD_In_C_Pin */
  GPIO_InitStruct.Pin = BCD_In_A_Pin|BCD_In_B_Pin|BCD_In_C_Pin;
 8002498:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800249c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4619      	mov	r1, r3
 80024ac:	480d      	ldr	r0, [pc, #52]	; (80024e4 <MX_GPIO_Init+0x13c>)
 80024ae:	f7fe f851 	bl	8000554 <HAL_GPIO_Init>

  /*Configure GPIO pin : HAB_Tx_Pin */
  GPIO_InitStruct.Pin = HAB_Tx_Pin;
 80024b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HAB_Tx_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <MX_GPIO_Init+0x138>)
 80024cc:	f7fe f842 	bl	8000554 <HAL_GPIO_Init>

}
 80024d0:	bf00      	nop
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40011000 	.word	0x40011000
 80024e0:	40010800 	.word	0x40010800
 80024e4:	40010c00 	.word	0x40010c00

080024e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	static uint8_t i_rx=0;
	if (f_rx==0) //Si no está recibiendo
 80024f0:	4b2a      	ldr	r3, [pc, #168]	; (800259c <HAL_UART_RxCpltCallback+0xb4>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <HAL_UART_RxCpltCallback+0x34>
	{
		if (a_rx[0]=='B') //Pregunta si escomienzo de trama
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_UART_RxCpltCallback+0xb8>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b42      	cmp	r3, #66	; 0x42
 80024fe:	d144      	bne.n	800258a <HAL_UART_RxCpltCallback+0xa2>
		{
			i_rx=0;
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
			v_rx[i_rx]=a_rx[0];
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_UART_RxCpltCallback+0xb8>)
 800250e:	7819      	ldrb	r1, [r3, #0]
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_UART_RxCpltCallback+0xc0>)
 8002512:	5499      	strb	r1, [r3, r2]
			f_rx=1;	//Preparo para seguir ricibiendo la trama
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_UART_RxCpltCallback+0xb4>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e036      	b.n	800258a <HAL_UART_RxCpltCallback+0xa2>
		}
	}
	else	//Si ya comenzó a recibir la trama (recibió la B)
	{
		i_rx++;
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 8002526:	701a      	strb	r2, [r3, #0]
		v_rx[i_rx]=a_rx[0];
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_UART_RxCpltCallback+0xb8>)
 8002530:	7819      	ldrb	r1, [r3, #0]
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_UART_RxCpltCallback+0xc0>)
 8002534:	5499      	strb	r1, [r3, r2]

		if (a_rx[0]=='Z') //Caracter de fin de trama
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_UART_RxCpltCallback+0xb8>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b5a      	cmp	r3, #90	; 0x5a
 800253c:	d106      	bne.n	800254c <HAL_UART_RxCpltCallback+0x64>
		{
			l_rx = i_rx + 3;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	3303      	adds	r3, #3
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_UART_RxCpltCallback+0xc4>)
 800254a:	801a      	strh	r2, [r3, #0]
		}

		if (i_rx==l_rx)	//Llegó al final de la trama
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_UART_RxCpltCallback+0xc4>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d117      	bne.n	800258a <HAL_UART_RxCpltCallback+0xa2>
		{
			f_rx=0;	//Preparo para recibir la proxima trama
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_UART_RxCpltCallback+0xb4>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]

			i_rx=0;
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_UART_RxCpltCallback+0xbc>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]

			l_pr=l_rx; //Guardo la ultima posición del vector recibido
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_UART_RxCpltCallback+0xc4>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_UART_RxCpltCallback+0xc8>)
 800256e:	701a      	strb	r2, [r3, #0]

			l_rx=l_max; //maxima longirud para comparar la proxima pasada
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_UART_RxCpltCallback+0xcc>)
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_UART_RxCpltCallback+0xc4>)
 8002576:	801a      	strh	r2, [r3, #0]
			l_rx--;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_UART_RxCpltCallback+0xc4>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_UART_RxCpltCallback+0xc4>)
 8002582:	801a      	strh	r2, [r3, #0]

			f_tc=1; //Flag de trama completa
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_UART_RxCpltCallback+0xd0>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
		}

		}

	//Prearo interrupcion para la recepcion, solo sirve para una vez
	  	HAL_UART_Receive_IT(&huart1, (uint8_t*)a_rx, sizeof(a_rx));
 800258a:	2201      	movs	r2, #1
 800258c:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_UART_RxCpltCallback+0xb8>)
 800258e:	480b      	ldr	r0, [pc, #44]	; (80025bc <HAL_UART_RxCpltCallback+0xd4>)
 8002590:	f7ff f9ce 	bl	8001930 <HAL_UART_Receive_IT>

}	//FIN UART
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000091 	.word	0x20000091
 80025a0:	200001bc 	.word	0x200001bc
 80025a4:	2000009a 	.word	0x2000009a
 80025a8:	200001c0 	.word	0x200001c0
 80025ac:	2000008c 	.word	0x2000008c
 80025b0:	20000090 	.word	0x20000090
 80025b4:	20000006 	.word	0x20000006
 80025b8:	20000092 	.word	0x20000092
 80025bc:	200002cc 	.word	0x200002cc

080025c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	static uint8_t aux=0;
	static uint8_t i=0;

	//Lectura de llaves, guardo en una variable que no me interesa, solo quiero actualizar el display
	aux=Valida_Entradas();
 80025c8:	f000 ffa0 	bl	800350c <Valida_Entradas>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80025d2:	701a      	strb	r2, [r3, #0]
	aux++;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80025de:	701a      	strb	r2, [r3, #0]

	//time to live de la recepción
	if (f_rx==1)
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10d      	bne.n	8002604 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		//Si tarda mas de un segundo en completar la recepción
		if(i==200)
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2bc8      	cmp	r3, #200	; 0xc8
 80025ee:	d102      	bne.n	80025f6 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			f_rx=0;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002600:	701a      	strb	r2, [r3, #0]
	{
		i=0;
	}

//		HAL_GPIO_TogglePin(Test_GPIO_Port, Test_Pin);
}	//Fin timer 2
 8002602:	e002      	b.n	800260a <HAL_TIM_PeriodElapsedCallback+0x4a>
		i=0;
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
}	//Fin timer 2
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000009b 	.word	0x2000009b
 8002618:	20000091 	.word	0x20000091
 800261c:	2000009c 	.word	0x2000009c

08002620 <Limpia_Recep>:

void Limpia_Recep(void)	//Limpia lo relacionado a la recepción y prepara una nueva
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8002626:	2300      	movs	r3, #0
 8002628:	80fb      	strh	r3, [r7, #6]
	for (i=0;i<=l_max-1;i++)
 800262a:	2300      	movs	r3, #0
 800262c:	80fb      	strh	r3, [r7, #6]
 800262e:	e008      	b.n	8002642 <Limpia_Recep+0x22>
	{
		v_pr[i]=v_rx[i]; //Lleno de espaciós vacios
 8002630:	88fa      	ldrh	r2, [r7, #6]
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	4912      	ldr	r1, [pc, #72]	; (8002680 <Limpia_Recep+0x60>)
 8002636:	5c89      	ldrb	r1, [r1, r2]
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <Limpia_Recep+0x64>)
 800263a:	54d1      	strb	r1, [r2, r3]
	for (i=0;i<=l_max-1;i++)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	3301      	adds	r3, #1
 8002640:	80fb      	strh	r3, [r7, #6]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <Limpia_Recep+0x68>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	3b01      	subs	r3, #1
 800264a:	429a      	cmp	r2, r3
 800264c:	ddf0      	ble.n	8002630 <Limpia_Recep+0x10>
//	for (i=0;i<=l_max-1;i++)
//	{
//		v_tx[i]=' '; //Lleno de espaciós vacios
//	}

	a_rx[0]=0;
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <Limpia_Recep+0x6c>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
//	i_rx=0;
	l_rx=l_max;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <Limpia_Recep+0x68>)
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <Limpia_Recep+0x70>)
 800265a:	801a      	strh	r2, [r3, #0]
	l_rx--;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <Limpia_Recep+0x70>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <Limpia_Recep+0x70>)
 8002666:	801a      	strh	r2, [r3, #0]
	f_rx=0;
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <Limpia_Recep+0x74>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
	f_tc=0;
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <Limpia_Recep+0x78>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]

} //Fin Limpia Recep
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200001c0 	.word	0x200001c0
 8002684:	200000b0 	.word	0x200000b0
 8002688:	20000006 	.word	0x20000006
 800268c:	200001bc 	.word	0x200001bc
 8002690:	2000008c 	.word	0x2000008c
 8002694:	20000091 	.word	0x20000091
 8002698:	20000092 	.word	0x20000092

0800269c <Limpia_Pr>:

void Limpia_Pr(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	80fb      	strh	r3, [r7, #6]

	for (i=0;i<=l_max-1;i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	80fb      	strh	r3, [r7, #6]
 80026aa:	e006      	b.n	80026ba <Limpia_Pr+0x1e>
	{
		v_pr[i]=' '; //Lleno de espaciós vacios
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <Limpia_Pr+0x34>)
 80026b0:	2120      	movs	r1, #32
 80026b2:	54d1      	strb	r1, [r2, r3]
	for (i=0;i<=l_max-1;i++)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	3301      	adds	r3, #1
 80026b8:	80fb      	strh	r3, [r7, #6]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <Limpia_Pr+0x38>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	429a      	cmp	r2, r3
 80026c4:	ddf2      	ble.n	80026ac <Limpia_Pr+0x10>
	}

} //Fin limpia Pr
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	200000b0 	.word	0x200000b0
 80026d4:	20000006 	.word	0x20000006

080026d8 <Valida_Cksum>:

int Valida_Cksum(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
	//Variables locales
	uint8_t Error=0;
 80026de:	2300      	movs	r3, #0
 80026e0:	71fb      	strb	r3, [r7, #7]
	uint8_t cksum=0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	71bb      	strb	r3, [r7, #6]
	uint16_t i=0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	80bb      	strh	r3, [r7, #4]

	//Validación del checksum

	for(i=0;i<=l_pr-1;i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	80bb      	strh	r3, [r7, #4]
 80026ee:	e008      	b.n	8002702 <Valida_Cksum+0x2a>
	{
		cksum+=v_pr[i];
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	4a16      	ldr	r2, [pc, #88]	; (800274c <Valida_Cksum+0x74>)
 80026f4:	5cd2      	ldrb	r2, [r2, r3]
 80026f6:	79bb      	ldrb	r3, [r7, #6]
 80026f8:	4413      	add	r3, r2
 80026fa:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<=l_pr-1;i++)
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	80bb      	strh	r3, [r7, #4]
 8002702:	88ba      	ldrh	r2, [r7, #4]
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <Valida_Cksum+0x78>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	3b01      	subs	r3, #1
 800270a:	429a      	cmp	r2, r3
 800270c:	ddf0      	ble.n	80026f0 <Valida_Cksum+0x18>
	}

	if(cksum=='B' || cksum=='Z' || cksum==10) cksum++;
 800270e:	79bb      	ldrb	r3, [r7, #6]
 8002710:	2b42      	cmp	r3, #66	; 0x42
 8002712:	d005      	beq.n	8002720 <Valida_Cksum+0x48>
 8002714:	79bb      	ldrb	r3, [r7, #6]
 8002716:	2b5a      	cmp	r3, #90	; 0x5a
 8002718:	d002      	beq.n	8002720 <Valida_Cksum+0x48>
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	2b0a      	cmp	r3, #10
 800271e:	d102      	bne.n	8002726 <Valida_Cksum+0x4e>
 8002720:	79bb      	ldrb	r3, [r7, #6]
 8002722:	3301      	adds	r3, #1
 8002724:	71bb      	strb	r3, [r7, #6]

	if(cksum==v_pr[l_pr])	//Verifico el cksm
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <Valida_Cksum+0x78>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <Valida_Cksum+0x74>)
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	79ba      	ldrb	r2, [r7, #6]
 8002732:	429a      	cmp	r2, r3
 8002734:	d102      	bne.n	800273c <Valida_Cksum+0x64>
	{
		Error=0;
 8002736:	2300      	movs	r3, #0
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	e001      	b.n	8002740 <Valida_Cksum+0x68>
	}
	else Error=1;	//No cumple cksm
 800273c:	2301      	movs	r3, #1
 800273e:	71fb      	strb	r3, [r7, #7]

	//Para probar
//	Error=0;

	return (Error);
 8002740:	79fb      	ldrb	r3, [r7, #7]

} //Fin Valida_Trama
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	200000b0 	.word	0x200000b0
 8002750:	20000090 	.word	0x20000090

08002754 <Lectura_Trama>:

int Lectura_Trama (void)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
	//Variables locales
	uint8_t Error=0;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
	uint8_t i=0;
 800275e:	2300      	movs	r3, #0
 8002760:	73bb      	strb	r3, [r7, #14]
	uint8_t i_rd=0;	//Posición de lectura
 8002762:	2300      	movs	r3, #0
 8002764:	737b      	strb	r3, [r7, #13]
	uint8_t i_wr=0;	//Posición de escritura (fila)
 8002766:	2300      	movs	r3, #0
 8002768:	733b      	strb	r3, [r7, #12]
	uint8_t v_ax[10];	//vector auxiliar de lectura

	//El vector tiene datos a partir de la posición 13 inclusive

	//Lectura de la instrucción:
	for(i_rd=13;i_rd<=20;i_rd++)
 800276a:	230d      	movs	r3, #13
 800276c:	737b      	strb	r3, [r7, #13]
 800276e:	e00e      	b.n	800278e <Lectura_Trama+0x3a>
	{
		v_ax[i_wr]=v_pr[i_rd];
 8002770:	7b7a      	ldrb	r2, [r7, #13]
 8002772:	7b3b      	ldrb	r3, [r7, #12]
 8002774:	494c      	ldr	r1, [pc, #304]	; (80028a8 <Lectura_Trama+0x154>)
 8002776:	5c8a      	ldrb	r2, [r1, r2]
 8002778:	f107 0110 	add.w	r1, r7, #16
 800277c:	440b      	add	r3, r1
 800277e:	f803 2c10 	strb.w	r2, [r3, #-16]
		i_wr++;
 8002782:	7b3b      	ldrb	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	733b      	strb	r3, [r7, #12]
	for(i_rd=13;i_rd<=20;i_rd++)
 8002788:	7b7b      	ldrb	r3, [r7, #13]
 800278a:	3301      	adds	r3, #1
 800278c:	737b      	strb	r3, [r7, #13]
 800278e:	7b7b      	ldrb	r3, [r7, #13]
 8002790:	2b14      	cmp	r3, #20
 8002792:	d9ed      	bls.n	8002770 <Lectura_Trama+0x1c>
	}

		 if(v_ax[0]=='M' && v_ax[1]=='A' && v_ax[2]=='R') inst=1;	//MAR Ensayo en marcha el equipo
 8002794:	783b      	ldrb	r3, [r7, #0]
 8002796:	2b4d      	cmp	r3, #77	; 0x4d
 8002798:	d109      	bne.n	80027ae <Lectura_Trama+0x5a>
 800279a:	787b      	ldrb	r3, [r7, #1]
 800279c:	2b41      	cmp	r3, #65	; 0x41
 800279e:	d106      	bne.n	80027ae <Lectura_Trama+0x5a>
 80027a0:	78bb      	ldrb	r3, [r7, #2]
 80027a2:	2b52      	cmp	r3, #82	; 0x52
 80027a4:	d103      	bne.n	80027ae <Lectura_Trama+0x5a>
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <Lectura_Trama+0x158>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e01b      	b.n	80027e6 <Lectura_Trama+0x92>
	else if(v_ax[0]=='S' && v_ax[1]=='T' && v_ax[2]=='P') inst=2;	//STP Fin de ensayo
 80027ae:	783b      	ldrb	r3, [r7, #0]
 80027b0:	2b53      	cmp	r3, #83	; 0x53
 80027b2:	d109      	bne.n	80027c8 <Lectura_Trama+0x74>
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b54      	cmp	r3, #84	; 0x54
 80027b8:	d106      	bne.n	80027c8 <Lectura_Trama+0x74>
 80027ba:	78bb      	ldrb	r3, [r7, #2]
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d103      	bne.n	80027c8 <Lectura_Trama+0x74>
 80027c0:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <Lectura_Trama+0x158>)
 80027c2:	2202      	movs	r2, #2
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e00e      	b.n	80027e6 <Lectura_Trama+0x92>
	else if(v_ax[0]=='S' && v_ax[1]=='T' && v_ax[2]=='D') inst=3;	//STD Pide mediciones
 80027c8:	783b      	ldrb	r3, [r7, #0]
 80027ca:	2b53      	cmp	r3, #83	; 0x53
 80027cc:	d109      	bne.n	80027e2 <Lectura_Trama+0x8e>
 80027ce:	787b      	ldrb	r3, [r7, #1]
 80027d0:	2b54      	cmp	r3, #84	; 0x54
 80027d2:	d106      	bne.n	80027e2 <Lectura_Trama+0x8e>
 80027d4:	78bb      	ldrb	r3, [r7, #2]
 80027d6:	2b44      	cmp	r3, #68	; 0x44
 80027d8:	d103      	bne.n	80027e2 <Lectura_Trama+0x8e>
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <Lectura_Trama+0x158>)
 80027dc:	2203      	movs	r2, #3
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e001      	b.n	80027e6 <Lectura_Trama+0x92>
	else Error=2; //Mensaje incorrecto
 80027e2:	2302      	movs	r3, #2
 80027e4:	73fb      	strb	r3, [r7, #15]


	//Si se pone en marcha, guarda los parametros del ensayo
	if(inst==1)
 80027e6:	4b31      	ldr	r3, [pc, #196]	; (80028ac <Lectura_Trama+0x158>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d156      	bne.n	800289c <Lectura_Trama+0x148>
	{
		//Guarda los valores en el vector, restado 48 para que no esté en ASCII
		i=0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73bb      	strb	r3, [r7, #14]
		for(i_rd=26;i_rd<=106;i_rd+=10)
 80027f2:	231a      	movs	r3, #26
 80027f4:	737b      	strb	r3, [r7, #13]
 80027f6:	e04e      	b.n	8002896 <Lectura_Trama+0x142>
			{
				Val[i][0]=v_pr[i_rd] - 48;
 80027f8:	7b7b      	ldrb	r3, [r7, #13]
 80027fa:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <Lectura_Trama+0x154>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	7bba      	ldrb	r2, [r7, #14]
 8002800:	3b30      	subs	r3, #48	; 0x30
 8002802:	b2d8      	uxtb	r0, r3
 8002804:	492a      	ldr	r1, [pc, #168]	; (80028b0 <Lectura_Trama+0x15c>)
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	440b      	add	r3, r1
 800280e:	4602      	mov	r2, r0
 8002810:	701a      	strb	r2, [r3, #0]
				Val[i][1]=v_pr[i_rd+1] - 48;
 8002812:	7b7b      	ldrb	r3, [r7, #13]
 8002814:	3301      	adds	r3, #1
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <Lectura_Trama+0x154>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	7bba      	ldrb	r2, [r7, #14]
 800281c:	3b30      	subs	r3, #48	; 0x30
 800281e:	b2d8      	uxtb	r0, r3
 8002820:	4923      	ldr	r1, [pc, #140]	; (80028b0 <Lectura_Trama+0x15c>)
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	440b      	add	r3, r1
 800282a:	3301      	adds	r3, #1
 800282c:	4602      	mov	r2, r0
 800282e:	701a      	strb	r2, [r3, #0]
				Val[i][2]=v_pr[i_rd+2] - 48;
 8002830:	7b7b      	ldrb	r3, [r7, #13]
 8002832:	3302      	adds	r3, #2
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <Lectura_Trama+0x154>)
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	7bba      	ldrb	r2, [r7, #14]
 800283a:	3b30      	subs	r3, #48	; 0x30
 800283c:	b2d8      	uxtb	r0, r3
 800283e:	491c      	ldr	r1, [pc, #112]	; (80028b0 <Lectura_Trama+0x15c>)
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	440b      	add	r3, r1
 8002848:	3302      	adds	r3, #2
 800284a:	4602      	mov	r2, r0
 800284c:	701a      	strb	r2, [r3, #0]
				Val[i][3]=v_pr[i_rd+3] - 48;
 800284e:	7b7b      	ldrb	r3, [r7, #13]
 8002850:	3303      	adds	r3, #3
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <Lectura_Trama+0x154>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	7bba      	ldrb	r2, [r7, #14]
 8002858:	3b30      	subs	r3, #48	; 0x30
 800285a:	b2d8      	uxtb	r0, r3
 800285c:	4914      	ldr	r1, [pc, #80]	; (80028b0 <Lectura_Trama+0x15c>)
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	440b      	add	r3, r1
 8002866:	3303      	adds	r3, #3
 8002868:	4602      	mov	r2, r0
 800286a:	701a      	strb	r2, [r3, #0]
				Val[i][4]=v_pr[i_rd+4] - 48;
 800286c:	7b7b      	ldrb	r3, [r7, #13]
 800286e:	3304      	adds	r3, #4
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <Lectura_Trama+0x154>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	7bba      	ldrb	r2, [r7, #14]
 8002876:	3b30      	subs	r3, #48	; 0x30
 8002878:	b2d8      	uxtb	r0, r3
 800287a:	490d      	ldr	r1, [pc, #52]	; (80028b0 <Lectura_Trama+0x15c>)
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	440b      	add	r3, r1
 8002884:	3304      	adds	r3, #4
 8002886:	4602      	mov	r2, r0
 8002888:	701a      	strb	r2, [r3, #0]
				i++;
 800288a:	7bbb      	ldrb	r3, [r7, #14]
 800288c:	3301      	adds	r3, #1
 800288e:	73bb      	strb	r3, [r7, #14]
		for(i_rd=26;i_rd<=106;i_rd+=10)
 8002890:	7b7b      	ldrb	r3, [r7, #13]
 8002892:	330a      	adds	r3, #10
 8002894:	737b      	strb	r3, [r7, #13]
 8002896:	7b7b      	ldrb	r3, [r7, #13]
 8002898:	2b6a      	cmp	r3, #106	; 0x6a
 800289a:	d9ad      	bls.n	80027f8 <Lectura_Trama+0xa4>
			}
	}

	return (Error);
 800289c:	7bfb      	ldrb	r3, [r7, #15]
} //Fin Lectura_Trama
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	200000b0 	.word	0x200000b0
 80028ac:	20000096 	.word	0x20000096
 80028b0:	2000030c 	.word	0x2000030c

080028b4 <Genera_Trama_ACK_ERROR>:

void Genera_Trama_ACK_ERROR (void) //Genera la trama a transmitir que contiene el ACK con el codigo del error (cero es sin error)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	71fb      	strb	r3, [r7, #7]
	uint8_t cksum=0;
 80028be:	2300      	movs	r3, #0
 80028c0:	71bb      	strb	r3, [r7, #6]

	static uint8_t r1=0;
	static uint8_t r2=0;
	static uint8_t r3=0;
	//Convierto el error a ascii, como maximo dos digitos tiene:
	e0=Error_rx%10;	//Obtengo unidad
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <Genera_Trama_ACK_ERROR+0x170>)
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <Genera_Trama_ACK_ERROR+0x174>)
 80028c8:	fba3 1302 	umull	r1, r3, r3, r2
 80028cc:	08d9      	lsrs	r1, r3, #3
 80028ce:	460b      	mov	r3, r1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b54      	ldr	r3, [pc, #336]	; (8002a2c <Genera_Trama_ACK_ERROR+0x178>)
 80028dc:	701a      	strb	r2, [r3, #0]
	e1=Error_rx/10; //Obtengo decena
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <Genera_Trama_ACK_ERROR+0x170>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4a51      	ldr	r2, [pc, #324]	; (8002a28 <Genera_Trama_ACK_ERROR+0x174>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <Genera_Trama_ACK_ERROR+0x17c>)
 80028ee:	701a      	strb	r2, [r3, #0]

	if(Error_rx==0)
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <Genera_Trama_ACK_ERROR+0x170>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <Genera_Trama_ACK_ERROR+0x58>
	{
		r1='A';
 80028f8:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <Genera_Trama_ACK_ERROR+0x180>)
 80028fa:	2241      	movs	r2, #65	; 0x41
 80028fc:	701a      	strb	r2, [r3, #0]
		r2='C';
 80028fe:	4b4e      	ldr	r3, [pc, #312]	; (8002a38 <Genera_Trama_ACK_ERROR+0x184>)
 8002900:	2243      	movs	r2, #67	; 0x43
 8002902:	701a      	strb	r2, [r3, #0]
		r3='K';
 8002904:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <Genera_Trama_ACK_ERROR+0x188>)
 8002906:	224b      	movs	r2, #75	; 0x4b
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	e008      	b.n	800291e <Genera_Trama_ACK_ERROR+0x6a>
	}
	else
	{
		r1='E';
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <Genera_Trama_ACK_ERROR+0x180>)
 800290e:	2245      	movs	r2, #69	; 0x45
 8002910:	701a      	strb	r2, [r3, #0]
		r2='R';
 8002912:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <Genera_Trama_ACK_ERROR+0x184>)
 8002914:	2252      	movs	r2, #82	; 0x52
 8002916:	701a      	strb	r2, [r3, #0]
		r3='R';
 8002918:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <Genera_Trama_ACK_ERROR+0x188>)
 800291a:	2252      	movs	r2, #82	; 0x52
 800291c:	701a      	strb	r2, [r3, #0]
	}

	//Armo el vector

	v_tx[0] ='B';
 800291e:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002920:	2242      	movs	r2, #66	; 0x42
 8002922:	701a      	strb	r2, [r3, #0]
	v_tx[1] ='|';
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002926:	227c      	movs	r2, #124	; 0x7c
 8002928:	705a      	strb	r2, [r3, #1]
	v_tx[2] =' ';
 800292a:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 800292c:	2220      	movs	r2, #32
 800292e:	709a      	strb	r2, [r3, #2]
	v_tx[3] =ID1;	//Origen
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002932:	2250      	movs	r2, #80	; 0x50
 8002934:	70da      	strb	r2, [r3, #3]
	v_tx[4] =ID2;
 8002936:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002938:	2241      	movs	r2, #65	; 0x41
 800293a:	711a      	strb	r2, [r3, #4]
	v_tx[5] =ID3;
 800293c:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 800293e:	2254      	movs	r2, #84	; 0x54
 8002940:	715a      	strb	r2, [r3, #5]
	v_tx[6] ='|';
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002944:	227c      	movs	r2, #124	; 0x7c
 8002946:	719a      	strb	r2, [r3, #6]
	v_tx[7] =' ';
 8002948:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 800294a:	2220      	movs	r2, #32
 800294c:	71da      	strb	r2, [r3, #7]
	v_tx[8] ='P';	//Destino
 800294e:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002950:	2250      	movs	r2, #80	; 0x50
 8002952:	721a      	strb	r2, [r3, #8]
	v_tx[9] ='C';
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002956:	2243      	movs	r2, #67	; 0x43
 8002958:	725a      	strb	r2, [r3, #9]
	v_tx[10]='S';
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 800295c:	2253      	movs	r2, #83	; 0x53
 800295e:	729a      	strb	r2, [r3, #10]
	v_tx[11]='|';
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002962:	227c      	movs	r2, #124	; 0x7c
 8002964:	72da      	strb	r2, [r3, #11]
	v_tx[12]=' ';
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002968:	2220      	movs	r2, #32
 800296a:	731a      	strb	r2, [r3, #12]
	v_tx[13]=r1;
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <Genera_Trama_ACK_ERROR+0x180>)
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002972:	735a      	strb	r2, [r3, #13]
	v_tx[14]=r2;
 8002974:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <Genera_Trama_ACK_ERROR+0x184>)
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 800297a:	739a      	strb	r2, [r3, #14]
	v_tx[15]=r3;
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <Genera_Trama_ACK_ERROR+0x188>)
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002982:	73da      	strb	r2, [r3, #15]
	v_tx[16]='0';
 8002984:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002986:	2230      	movs	r2, #48	; 0x30
 8002988:	741a      	strb	r2, [r3, #16]
	v_tx[17]='0';
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 800298c:	2230      	movs	r2, #48	; 0x30
 800298e:	745a      	strb	r2, [r3, #17]
	v_tx[18]='0';
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002992:	2230      	movs	r2, #48	; 0x30
 8002994:	749a      	strb	r2, [r3, #18]
	v_tx[19]= e1 + 48;
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <Genera_Trama_ACK_ERROR+0x17c>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	3330      	adds	r3, #48	; 0x30
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029a0:	74da      	strb	r2, [r3, #19]
	v_tx[20]= e0 + 48;
 80029a2:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <Genera_Trama_ACK_ERROR+0x178>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3330      	adds	r3, #48	; 0x30
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029ac:	751a      	strb	r2, [r3, #20]
	v_tx[21]='|';
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029b0:	227c      	movs	r2, #124	; 0x7c
 80029b2:	755a      	strb	r2, [r3, #21]
	v_tx[22]=' ';
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029b6:	2220      	movs	r2, #32
 80029b8:	759a      	strb	r2, [r3, #22]
	v_tx[23]='Z';
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029bc:	225a      	movs	r2, #90	; 0x5a
 80029be:	75da      	strb	r2, [r3, #23]
	v_tx[24]='|';
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029c2:	227c      	movs	r2, #124	; 0x7c
 80029c4:	761a      	strb	r2, [r3, #24]
	v_tx[25]=' ';
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029c8:	2220      	movs	r2, #32
 80029ca:	765a      	strb	r2, [r3, #25]

	cksum=0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	71bb      	strb	r3, [r7, #6]


	for(i=0;i<=25;i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	71fb      	strb	r3, [r7, #7]
 80029d4:	e008      	b.n	80029e8 <Genera_Trama_ACK_ERROR+0x134>
	{
		cksum+=v_tx[i];
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 80029da:	5cd2      	ldrb	r2, [r2, r3]
 80029dc:	79bb      	ldrb	r3, [r7, #6]
 80029de:	4413      	add	r3, r2
 80029e0:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<=25;i++)
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	3301      	adds	r3, #1
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	2b19      	cmp	r3, #25
 80029ec:	d9f3      	bls.n	80029d6 <Genera_Trama_ACK_ERROR+0x122>
	}

	if(cksum=='B' || cksum=='Z' || cksum==10) cksum++;
 80029ee:	79bb      	ldrb	r3, [r7, #6]
 80029f0:	2b42      	cmp	r3, #66	; 0x42
 80029f2:	d005      	beq.n	8002a00 <Genera_Trama_ACK_ERROR+0x14c>
 80029f4:	79bb      	ldrb	r3, [r7, #6]
 80029f6:	2b5a      	cmp	r3, #90	; 0x5a
 80029f8:	d002      	beq.n	8002a00 <Genera_Trama_ACK_ERROR+0x14c>
 80029fa:	79bb      	ldrb	r3, [r7, #6]
 80029fc:	2b0a      	cmp	r3, #10
 80029fe:	d102      	bne.n	8002a06 <Genera_Trama_ACK_ERROR+0x152>
 8002a00:	79bb      	ldrb	r3, [r7, #6]
 8002a02:	3301      	adds	r3, #1
 8002a04:	71bb      	strb	r3, [r7, #6]

	v_tx[26]=cksum;
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002a08:	79bb      	ldrb	r3, [r7, #6]
 8002a0a:	7693      	strb	r3, [r2, #26]

	// \n
	v_tx[27]=10;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <Genera_Trama_ACK_ERROR+0x18c>)
 8002a0e:	220a      	movs	r2, #10
 8002a10:	76da      	strb	r2, [r3, #27]
	l_tx=28;	//Longitud para transmitir
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <Genera_Trama_ACK_ERROR+0x190>)
 8002a14:	221c      	movs	r2, #28
 8002a16:	801a      	strh	r2, [r3, #0]

} //Fin Genera Trama ACK
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000093 	.word	0x20000093
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	20000098 	.word	0x20000098
 8002a30:	20000099 	.word	0x20000099
 8002a34:	2000009d 	.word	0x2000009d
 8002a38:	2000009e 	.word	0x2000009e
 8002a3c:	2000009f 	.word	0x2000009f
 8002a40:	200003ac 	.word	0x200003ac
 8002a44:	2000008e 	.word	0x2000008e

08002a48 <Genera_Trama_RLT>:

void Genera_Trama_RLT (void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	71fb      	strb	r3, [r7, #7]
	uint8_t k=0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	71bb      	strb	r3, [r7, #6]
	uint8_t cksum=0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	717b      	strb	r3, [r7, #5]

	//Siempre envía 20 resultados. Si el puesto esta vacío, no manda nada. Tiene que generar el signo
	//Los resultados los carga cuando pasa cierto tiempo, asi no se actualzan cada vez que se piden resultados

	//Armo cabecera del vector
	v_tx[0] ='B';
 8002a5a:	4bae      	ldr	r3, [pc, #696]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a5c:	2242      	movs	r2, #66	; 0x42
 8002a5e:	701a      	strb	r2, [r3, #0]
	v_tx[1] ='|';
 8002a60:	4bac      	ldr	r3, [pc, #688]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a62:	227c      	movs	r2, #124	; 0x7c
 8002a64:	705a      	strb	r2, [r3, #1]
	v_tx[2] =' ';
 8002a66:	4bab      	ldr	r3, [pc, #684]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a68:	2220      	movs	r2, #32
 8002a6a:	709a      	strb	r2, [r3, #2]
	v_tx[3] =ID1;	//Origen
 8002a6c:	4ba9      	ldr	r3, [pc, #676]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a6e:	2250      	movs	r2, #80	; 0x50
 8002a70:	70da      	strb	r2, [r3, #3]
	v_tx[4] =ID2;
 8002a72:	4ba8      	ldr	r3, [pc, #672]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a74:	2241      	movs	r2, #65	; 0x41
 8002a76:	711a      	strb	r2, [r3, #4]
	v_tx[5] =ID3;
 8002a78:	4ba6      	ldr	r3, [pc, #664]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a7a:	2254      	movs	r2, #84	; 0x54
 8002a7c:	715a      	strb	r2, [r3, #5]
	v_tx[6] ='|';
 8002a7e:	4ba5      	ldr	r3, [pc, #660]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a80:	227c      	movs	r2, #124	; 0x7c
 8002a82:	719a      	strb	r2, [r3, #6]
	v_tx[7] =' ';
 8002a84:	4ba3      	ldr	r3, [pc, #652]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a86:	2220      	movs	r2, #32
 8002a88:	71da      	strb	r2, [r3, #7]
	v_tx[8] ='P';	//Destino
 8002a8a:	4ba2      	ldr	r3, [pc, #648]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a8c:	2250      	movs	r2, #80	; 0x50
 8002a8e:	721a      	strb	r2, [r3, #8]
	v_tx[9] ='C';
 8002a90:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a92:	2243      	movs	r2, #67	; 0x43
 8002a94:	725a      	strb	r2, [r3, #9]
	v_tx[10]='S';
 8002a96:	4b9f      	ldr	r3, [pc, #636]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a98:	2253      	movs	r2, #83	; 0x53
 8002a9a:	729a      	strb	r2, [r3, #10]
	v_tx[11]='|';
 8002a9c:	4b9d      	ldr	r3, [pc, #628]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002a9e:	227c      	movs	r2, #124	; 0x7c
 8002aa0:	72da      	strb	r2, [r3, #11]
	v_tx[12]=' ';
 8002aa2:	4b9c      	ldr	r3, [pc, #624]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	731a      	strb	r2, [r3, #12]

	//Genero kp, siempre la misma para probar
	v_tx[13]='1';
 8002aa8:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002aaa:	2231      	movs	r2, #49	; 0x31
 8002aac:	735a      	strb	r2, [r3, #13]
	v_tx[14]='2';
 8002aae:	4b99      	ldr	r3, [pc, #612]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ab0:	2232      	movs	r2, #50	; 0x32
 8002ab2:	739a      	strb	r2, [r3, #14]
	v_tx[15]='3';
 8002ab4:	4b97      	ldr	r3, [pc, #604]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ab6:	2233      	movs	r2, #51	; 0x33
 8002ab8:	73da      	strb	r2, [r3, #15]
	v_tx[16]='4';
 8002aba:	4b96      	ldr	r3, [pc, #600]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002abc:	2234      	movs	r2, #52	; 0x34
 8002abe:	741a      	strb	r2, [r3, #16]
	v_tx[17]='5';
 8002ac0:	4b94      	ldr	r3, [pc, #592]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ac2:	2235      	movs	r2, #53	; 0x35
 8002ac4:	745a      	strb	r2, [r3, #17]
	v_tx[18]='6';
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ac8:	2236      	movs	r2, #54	; 0x36
 8002aca:	749a      	strb	r2, [r3, #18]
	v_tx[19]='7';
 8002acc:	4b91      	ldr	r3, [pc, #580]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ace:	2237      	movs	r2, #55	; 0x37
 8002ad0:	74da      	strb	r2, [r3, #19]
	v_tx[20]='8';
 8002ad2:	4b90      	ldr	r3, [pc, #576]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ad4:	2238      	movs	r2, #56	; 0x38
 8002ad6:	751a      	strb	r2, [r3, #20]
	v_tx[21]='9';
 8002ad8:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ada:	2239      	movs	r2, #57	; 0x39
 8002adc:	755a      	strb	r2, [r3, #21]
	v_tx[22]='1';
 8002ade:	4b8d      	ldr	r3, [pc, #564]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ae0:	2231      	movs	r2, #49	; 0x31
 8002ae2:	759a      	strb	r2, [r3, #22]

	//Armo el resto del vector:

	//Tensión
	k=0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	71bb      	strb	r3, [r7, #6]
	for(i=23;i<=43;i+=10)
 8002ae8:	2317      	movs	r3, #23
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	e04c      	b.n	8002b88 <Genera_Trama_RLT+0x140>
	{
		v_tx[i]='|';
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	4a88      	ldr	r2, [pc, #544]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002af2:	217c      	movs	r1, #124	; 0x7c
 8002af4:	54d1      	strb	r1, [r2, r3]
		v_tx[i+1]=' ';
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a86      	ldr	r2, [pc, #536]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002afc:	2120      	movs	r1, #32
 8002afe:	54d1      	strb	r1, [r2, r3]
		v_tx[i+2]='0';
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	3302      	adds	r3, #2
 8002b04:	4a83      	ldr	r2, [pc, #524]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b06:	2130      	movs	r1, #48	; 0x30
 8002b08:	54d1      	strb	r1, [r2, r3]
		v_tx[i+3]='0';
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	3303      	adds	r3, #3
 8002b0e:	4a81      	ldr	r2, [pc, #516]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b10:	2130      	movs	r1, #48	; 0x30
 8002b12:	54d1      	strb	r1, [r2, r3]
		v_tx[i+4]='0';
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4a7e      	ldr	r2, [pc, #504]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b1a:	2130      	movs	r1, #48	; 0x30
 8002b1c:	54d1      	strb	r1, [r2, r3]
		v_tx[i+5]=rlt_U[k];
 8002b1e:	79ba      	ldrb	r2, [r7, #6]
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	3305      	adds	r3, #5
 8002b24:	497c      	ldr	r1, [pc, #496]	; (8002d18 <Genera_Trama_RLT+0x2d0>)
 8002b26:	5c89      	ldrb	r1, [r1, r2]
 8002b28:	4a7a      	ldr	r2, [pc, #488]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b2a:	54d1      	strb	r1, [r2, r3]
		k++;
 8002b2c:	79bb      	ldrb	r3, [r7, #6]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	71bb      	strb	r3, [r7, #6]
		v_tx[i+6]=rlt_U[k];
 8002b32:	79ba      	ldrb	r2, [r7, #6]
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	3306      	adds	r3, #6
 8002b38:	4977      	ldr	r1, [pc, #476]	; (8002d18 <Genera_Trama_RLT+0x2d0>)
 8002b3a:	5c89      	ldrb	r1, [r1, r2]
 8002b3c:	4a75      	ldr	r2, [pc, #468]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b3e:	54d1      	strb	r1, [r2, r3]
		k++;
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	3301      	adds	r3, #1
 8002b44:	71bb      	strb	r3, [r7, #6]
		v_tx[i+7]=rlt_U[k];
 8002b46:	79ba      	ldrb	r2, [r7, #6]
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	3307      	adds	r3, #7
 8002b4c:	4972      	ldr	r1, [pc, #456]	; (8002d18 <Genera_Trama_RLT+0x2d0>)
 8002b4e:	5c89      	ldrb	r1, [r1, r2]
 8002b50:	4a70      	ldr	r2, [pc, #448]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b52:	54d1      	strb	r1, [r2, r3]
		k++;
 8002b54:	79bb      	ldrb	r3, [r7, #6]
 8002b56:	3301      	adds	r3, #1
 8002b58:	71bb      	strb	r3, [r7, #6]
		v_tx[i+8]=rlt_U[k];
 8002b5a:	79ba      	ldrb	r2, [r7, #6]
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	496d      	ldr	r1, [pc, #436]	; (8002d18 <Genera_Trama_RLT+0x2d0>)
 8002b62:	5c89      	ldrb	r1, [r1, r2]
 8002b64:	4a6b      	ldr	r2, [pc, #428]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b66:	54d1      	strb	r1, [r2, r3]
		k++;
 8002b68:	79bb      	ldrb	r3, [r7, #6]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	71bb      	strb	r3, [r7, #6]
		v_tx[i+9]=rlt_U[k];
 8002b6e:	79ba      	ldrb	r2, [r7, #6]
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	3309      	adds	r3, #9
 8002b74:	4968      	ldr	r1, [pc, #416]	; (8002d18 <Genera_Trama_RLT+0x2d0>)
 8002b76:	5c89      	ldrb	r1, [r1, r2]
 8002b78:	4a66      	ldr	r2, [pc, #408]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b7a:	54d1      	strb	r1, [r2, r3]
		k++;
 8002b7c:	79bb      	ldrb	r3, [r7, #6]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	71bb      	strb	r3, [r7, #6]
	for(i=23;i<=43;i+=10)
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	330a      	adds	r3, #10
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	2b2b      	cmp	r3, #43	; 0x2b
 8002b8c:	d9af      	bls.n	8002aee <Genera_Trama_RLT+0xa6>
	}

	//Corriente
	k=0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	71bb      	strb	r3, [r7, #6]
	for(i=53;i<=73;i+=10)
 8002b92:	2335      	movs	r3, #53	; 0x35
 8002b94:	71fb      	strb	r3, [r7, #7]
 8002b96:	e04c      	b.n	8002c32 <Genera_Trama_RLT+0x1ea>
	{
		v_tx[i]='|';
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	4a5e      	ldr	r2, [pc, #376]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002b9c:	217c      	movs	r1, #124	; 0x7c
 8002b9e:	54d1      	strb	r1, [r2, r3]
		v_tx[i+1]=' ';
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	54d1      	strb	r1, [r2, r3]
		v_tx[i+2]='0';
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	3302      	adds	r3, #2
 8002bae:	4a59      	ldr	r2, [pc, #356]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002bb0:	2130      	movs	r1, #48	; 0x30
 8002bb2:	54d1      	strb	r1, [r2, r3]
		v_tx[i+3]='0';
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	3303      	adds	r3, #3
 8002bb8:	4a56      	ldr	r2, [pc, #344]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002bba:	2130      	movs	r1, #48	; 0x30
 8002bbc:	54d1      	strb	r1, [r2, r3]
		v_tx[i+4]='0';
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4a54      	ldr	r2, [pc, #336]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002bc4:	2130      	movs	r1, #48	; 0x30
 8002bc6:	54d1      	strb	r1, [r2, r3]
		v_tx[i+5]=rlt_I[k];
 8002bc8:	79ba      	ldrb	r2, [r7, #6]
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	3305      	adds	r3, #5
 8002bce:	4953      	ldr	r1, [pc, #332]	; (8002d1c <Genera_Trama_RLT+0x2d4>)
 8002bd0:	5c89      	ldrb	r1, [r1, r2]
 8002bd2:	4a50      	ldr	r2, [pc, #320]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002bd4:	54d1      	strb	r1, [r2, r3]
		k++;
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	71bb      	strb	r3, [r7, #6]
		v_tx[i+6]=rlt_I[k];
 8002bdc:	79ba      	ldrb	r2, [r7, #6]
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	3306      	adds	r3, #6
 8002be2:	494e      	ldr	r1, [pc, #312]	; (8002d1c <Genera_Trama_RLT+0x2d4>)
 8002be4:	5c89      	ldrb	r1, [r1, r2]
 8002be6:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002be8:	54d1      	strb	r1, [r2, r3]
		k++;
 8002bea:	79bb      	ldrb	r3, [r7, #6]
 8002bec:	3301      	adds	r3, #1
 8002bee:	71bb      	strb	r3, [r7, #6]
		v_tx[i+7]=rlt_I[k];
 8002bf0:	79ba      	ldrb	r2, [r7, #6]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	3307      	adds	r3, #7
 8002bf6:	4949      	ldr	r1, [pc, #292]	; (8002d1c <Genera_Trama_RLT+0x2d4>)
 8002bf8:	5c89      	ldrb	r1, [r1, r2]
 8002bfa:	4a46      	ldr	r2, [pc, #280]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002bfc:	54d1      	strb	r1, [r2, r3]
		k++;
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	3301      	adds	r3, #1
 8002c02:	71bb      	strb	r3, [r7, #6]
		v_tx[i+8]=rlt_I[k];
 8002c04:	79ba      	ldrb	r2, [r7, #6]
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	3308      	adds	r3, #8
 8002c0a:	4944      	ldr	r1, [pc, #272]	; (8002d1c <Genera_Trama_RLT+0x2d4>)
 8002c0c:	5c89      	ldrb	r1, [r1, r2]
 8002c0e:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c10:	54d1      	strb	r1, [r2, r3]
		k++;
 8002c12:	79bb      	ldrb	r3, [r7, #6]
 8002c14:	3301      	adds	r3, #1
 8002c16:	71bb      	strb	r3, [r7, #6]
		v_tx[i+9]=rlt_I[k];
 8002c18:	79ba      	ldrb	r2, [r7, #6]
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	3309      	adds	r3, #9
 8002c1e:	493f      	ldr	r1, [pc, #252]	; (8002d1c <Genera_Trama_RLT+0x2d4>)
 8002c20:	5c89      	ldrb	r1, [r1, r2]
 8002c22:	4a3c      	ldr	r2, [pc, #240]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c24:	54d1      	strb	r1, [r2, r3]
		k++;
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	71bb      	strb	r3, [r7, #6]
	for(i=53;i<=73;i+=10)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	330a      	adds	r3, #10
 8002c30:	71fb      	strb	r3, [r7, #7]
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b49      	cmp	r3, #73	; 0x49
 8002c36:	d9af      	bls.n	8002b98 <Genera_Trama_RLT+0x150>
	}

	//Angulo
	k=0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	71bb      	strb	r3, [r7, #6]
	for(i=83;i<=103;i+=10)
 8002c3c:	2353      	movs	r3, #83	; 0x53
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	e04c      	b.n	8002cdc <Genera_Trama_RLT+0x294>
	{
		v_tx[i]='|';
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c46:	217c      	movs	r1, #124	; 0x7c
 8002c48:	54d1      	strb	r1, [r2, r3]
		v_tx[i+1]=' ';
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c50:	2120      	movs	r1, #32
 8002c52:	54d1      	strb	r1, [r2, r3]
		v_tx[i+2]='0';
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	3302      	adds	r3, #2
 8002c58:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c5a:	2130      	movs	r1, #48	; 0x30
 8002c5c:	54d1      	strb	r1, [r2, r3]
		v_tx[i+3]='0';
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	3303      	adds	r3, #3
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c64:	2130      	movs	r1, #48	; 0x30
 8002c66:	54d1      	strb	r1, [r2, r3]
		v_tx[i+4]='0';
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c6e:	2130      	movs	r1, #48	; 0x30
 8002c70:	54d1      	strb	r1, [r2, r3]
		v_tx[i+5]=rlt_P[k];
 8002c72:	79ba      	ldrb	r2, [r7, #6]
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	3305      	adds	r3, #5
 8002c78:	4929      	ldr	r1, [pc, #164]	; (8002d20 <Genera_Trama_RLT+0x2d8>)
 8002c7a:	5c89      	ldrb	r1, [r1, r2]
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c7e:	54d1      	strb	r1, [r2, r3]
		k++;
 8002c80:	79bb      	ldrb	r3, [r7, #6]
 8002c82:	3301      	adds	r3, #1
 8002c84:	71bb      	strb	r3, [r7, #6]
		v_tx[i+6]=rlt_P[k];
 8002c86:	79ba      	ldrb	r2, [r7, #6]
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	3306      	adds	r3, #6
 8002c8c:	4924      	ldr	r1, [pc, #144]	; (8002d20 <Genera_Trama_RLT+0x2d8>)
 8002c8e:	5c89      	ldrb	r1, [r1, r2]
 8002c90:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002c92:	54d1      	strb	r1, [r2, r3]
		k++;
 8002c94:	79bb      	ldrb	r3, [r7, #6]
 8002c96:	3301      	adds	r3, #1
 8002c98:	71bb      	strb	r3, [r7, #6]
		v_tx[i+7]=rlt_P[k];
 8002c9a:	79ba      	ldrb	r2, [r7, #6]
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	491f      	ldr	r1, [pc, #124]	; (8002d20 <Genera_Trama_RLT+0x2d8>)
 8002ca2:	5c89      	ldrb	r1, [r1, r2]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ca6:	54d1      	strb	r1, [r2, r3]
		k++;
 8002ca8:	79bb      	ldrb	r3, [r7, #6]
 8002caa:	3301      	adds	r3, #1
 8002cac:	71bb      	strb	r3, [r7, #6]
		v_tx[i+8]=rlt_P[k];
 8002cae:	79ba      	ldrb	r2, [r7, #6]
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	491a      	ldr	r1, [pc, #104]	; (8002d20 <Genera_Trama_RLT+0x2d8>)
 8002cb6:	5c89      	ldrb	r1, [r1, r2]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002cba:	54d1      	strb	r1, [r2, r3]
		k++;
 8002cbc:	79bb      	ldrb	r3, [r7, #6]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	71bb      	strb	r3, [r7, #6]
		v_tx[i+9]=rlt_P[k];
 8002cc2:	79ba      	ldrb	r2, [r7, #6]
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	3309      	adds	r3, #9
 8002cc8:	4915      	ldr	r1, [pc, #84]	; (8002d20 <Genera_Trama_RLT+0x2d8>)
 8002cca:	5c89      	ldrb	r1, [r1, r2]
 8002ccc:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002cce:	54d1      	strb	r1, [r2, r3]
		k++;
 8002cd0:	79bb      	ldrb	r3, [r7, #6]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	71bb      	strb	r3, [r7, #6]
	for(i=83;i<=103;i+=10)
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	330a      	adds	r3, #10
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2b67      	cmp	r3, #103	; 0x67
 8002ce0:	d9af      	bls.n	8002c42 <Genera_Trama_RLT+0x1fa>
	}

	v_tx[113]='|';
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002ce4:	227c      	movs	r2, #124	; 0x7c
 8002ce6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	v_tx[114]=' ';
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	v_tx[115]='Z';
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002cf4:	225a      	movs	r2, #90	; 0x5a
 8002cf6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	v_tx[116]='|';
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002cfc:	227c      	movs	r2, #124	; 0x7c
 8002cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	v_tx[117]=' ';
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <Genera_Trama_RLT+0x2cc>)
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

	cksum=0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	717b      	strb	r3, [r7, #5]

	for(i=0;i<=117;i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	71fb      	strb	r3, [r7, #7]
 8002d12:	e010      	b.n	8002d36 <Genera_Trama_RLT+0x2ee>
 8002d14:	200003ac 	.word	0x200003ac
 8002d18:	2000034c 	.word	0x2000034c
 8002d1c:	200004dc 	.word	0x200004dc
 8002d20:	2000033c 	.word	0x2000033c
	{
		cksum+=v_tx[i];
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <Genera_Trama_RLT+0x32c>)
 8002d28:	5cd2      	ldrb	r2, [r2, r3]
 8002d2a:	797b      	ldrb	r3, [r7, #5]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	717b      	strb	r3, [r7, #5]
	for(i=0;i<=117;i++)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	3301      	adds	r3, #1
 8002d34:	71fb      	strb	r3, [r7, #7]
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b75      	cmp	r3, #117	; 0x75
 8002d3a:	d9f3      	bls.n	8002d24 <Genera_Trama_RLT+0x2dc>
	}

	if(cksum=='B' || cksum=='Z' || cksum==10) cksum++;
 8002d3c:	797b      	ldrb	r3, [r7, #5]
 8002d3e:	2b42      	cmp	r3, #66	; 0x42
 8002d40:	d005      	beq.n	8002d4e <Genera_Trama_RLT+0x306>
 8002d42:	797b      	ldrb	r3, [r7, #5]
 8002d44:	2b5a      	cmp	r3, #90	; 0x5a
 8002d46:	d002      	beq.n	8002d4e <Genera_Trama_RLT+0x306>
 8002d48:	797b      	ldrb	r3, [r7, #5]
 8002d4a:	2b0a      	cmp	r3, #10
 8002d4c:	d102      	bne.n	8002d54 <Genera_Trama_RLT+0x30c>
 8002d4e:	797b      	ldrb	r3, [r7, #5]
 8002d50:	3301      	adds	r3, #1
 8002d52:	717b      	strb	r3, [r7, #5]

	v_tx[118]=cksum;
 8002d54:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <Genera_Trama_RLT+0x32c>)
 8002d56:	797b      	ldrb	r3, [r7, #5]
 8002d58:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76

	v_tx[119]=10;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <Genera_Trama_RLT+0x32c>)
 8002d5e:	220a      	movs	r2, #10
 8002d60:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

	l_tx=120;
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <Genera_Trama_RLT+0x330>)
 8002d66:	2278      	movs	r2, #120	; 0x78
 8002d68:	801a      	strh	r2, [r3, #0]

}//Fin Genera_Trama_RLT
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	200003ac 	.word	0x200003ac
 8002d78:	2000008e 	.word	0x2000008e

08002d7c <Genera_Valores_RLT>:

void Genera_Valores_RLT (void) 	//Genera los valores que se van a usar para los resultados
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0

	//Tomamos los valores guardados, restamos uno y sumamos aleatoriamente hasta 2, los decimales los ponemos aleatorios

	uint8_t i=0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]
	uint8_t k=0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75bb      	strb	r3, [r7, #22]
	uint16_t V_med[9]; //Guarda los valores en numeros

	//Paso a decimal los valores que cambian,  les resto 10 (el eltimo digito siempre son decimales, y les sumo un random de 20
	V_med[0]=Val[0][1]*1000+Val[0][2]*100+Val[0][3]*10+Val[0][4] - 10 + rand() % 20;
 8002d8a:	4bb9      	ldr	r3, [pc, #740]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	0152      	lsls	r2, r2, #5
 8002d94:	1ad2      	subs	r2, r2, r3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	4bb4      	ldr	r3, [pc, #720]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002da0:	789b      	ldrb	r3, [r3, #2]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4619      	mov	r1, r3
 8002da6:	0089      	lsls	r1, r1, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	4619      	mov	r1, r3
 8002dac:	0088      	lsls	r0, r1, #2
 8002dae:	4619      	mov	r1, r3
 8002db0:	4603      	mov	r3, r0
 8002db2:	440b      	add	r3, r1
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4bac      	ldr	r3, [pc, #688]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002dbe:	78db      	ldrb	r3, [r3, #3]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	0089      	lsls	r1, r1, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4ba7      	ldr	r3, [pc, #668]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b29c      	uxth	r4, r3
 8002dda:	f000 fd8f 	bl	80038fc <rand>
 8002dde:	4601      	mov	r1, r0
 8002de0:	4ba4      	ldr	r3, [pc, #656]	; (8003074 <Genera_Valores_RLT+0x2f8>)
 8002de2:	fb83 2301 	smull	r2, r3, r3, r1
 8002de6:	10da      	asrs	r2, r3, #3
 8002de8:	17cb      	asrs	r3, r1, #31
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	1aca      	subs	r2, r1, r3
 8002df6:	b293      	uxth	r3, r2
 8002df8:	4423      	add	r3, r4
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b0a      	subs	r3, #10
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	80bb      	strh	r3, [r7, #4]
	V_med[1]=Val[1][1]*1000+Val[1][2]*100+Val[1][3]*10+Val[1][4] - 10 + rand() % 20;
 8002e02:	4b9b      	ldr	r3, [pc, #620]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002e04:	799b      	ldrb	r3, [r3, #6]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	0152      	lsls	r2, r2, #5
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	4b96      	ldr	r3, [pc, #600]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002e18:	79db      	ldrb	r3, [r3, #7]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	0089      	lsls	r1, r1, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	4619      	mov	r1, r3
 8002e24:	0088      	lsls	r0, r1, #2
 8002e26:	4619      	mov	r1, r3
 8002e28:	4603      	mov	r3, r0
 8002e2a:	440b      	add	r3, r1
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b8e      	ldr	r3, [pc, #568]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002e36:	7a1b      	ldrb	r3, [r3, #8]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	0089      	lsls	r1, r1, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	4b89      	ldr	r3, [pc, #548]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002e4a:	7a5b      	ldrb	r3, [r3, #9]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	b29c      	uxth	r4, r3
 8002e52:	f000 fd53 	bl	80038fc <rand>
 8002e56:	4601      	mov	r1, r0
 8002e58:	4b86      	ldr	r3, [pc, #536]	; (8003074 <Genera_Valores_RLT+0x2f8>)
 8002e5a:	fb83 2301 	smull	r2, r3, r3, r1
 8002e5e:	10da      	asrs	r2, r3, #3
 8002e60:	17cb      	asrs	r3, r1, #31
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	1aca      	subs	r2, r1, r3
 8002e6e:	b293      	uxth	r3, r2
 8002e70:	4423      	add	r3, r4
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b0a      	subs	r3, #10
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	80fb      	strh	r3, [r7, #6]
	V_med[2]=Val[2][1]*1000+Val[2][2]*100+Val[2][3]*10+Val[2][4] - 10 + rand() % 20;
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002e7c:	7adb      	ldrb	r3, [r3, #11]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	0152      	lsls	r2, r2, #5
 8002e84:	1ad2      	subs	r2, r2, r3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	4b78      	ldr	r3, [pc, #480]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002e90:	7b1b      	ldrb	r3, [r3, #12]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4619      	mov	r1, r3
 8002e96:	0089      	lsls	r1, r1, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	0088      	lsls	r0, r1, #2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	440b      	add	r3, r1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002eae:	7b5b      	ldrb	r3, [r3, #13]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	0089      	lsls	r1, r1, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	4b6b      	ldr	r3, [pc, #428]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002ec2:	7b9b      	ldrb	r3, [r3, #14]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	b29c      	uxth	r4, r3
 8002eca:	f000 fd17 	bl	80038fc <rand>
 8002ece:	4601      	mov	r1, r0
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <Genera_Valores_RLT+0x2f8>)
 8002ed2:	fb83 2301 	smull	r2, r3, r3, r1
 8002ed6:	10da      	asrs	r2, r3, #3
 8002ed8:	17cb      	asrs	r3, r1, #31
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	1aca      	subs	r2, r1, r3
 8002ee6:	b293      	uxth	r3, r2
 8002ee8:	4423      	add	r3, r4
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b0a      	subs	r3, #10
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	813b      	strh	r3, [r7, #8]
	V_med[3]=Val[3][0]*10000+Val[3][1]*1000+Val[3][2]*100+Val[3][3]*10+Val[3][4] - 10 + rand() % 20;
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002ef4:	7bdb      	ldrb	r3, [r3, #15]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	0152      	lsls	r2, r2, #5
 8002efc:	1ad2      	subs	r2, r2, r3
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	461a      	mov	r2, r3
 8002f04:	0091      	lsls	r1, r2, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b57      	ldr	r3, [pc, #348]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002f12:	7c1b      	ldrb	r3, [r3, #16]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	0149      	lsls	r1, r1, #5
 8002f1a:	1ac9      	subs	r1, r1, r3
 8002f1c:	0089      	lsls	r1, r1, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b51      	ldr	r3, [pc, #324]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002f2a:	7c9b      	ldrb	r3, [r3, #18]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4619      	mov	r1, r3
 8002f30:	0089      	lsls	r1, r1, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	b299      	uxth	r1, r3
 8002f38:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002f3a:	7c5b      	ldrb	r3, [r3, #17]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	0080      	lsls	r0, r0, #2
 8002f42:	4403      	add	r3, r0
 8002f44:	4618      	mov	r0, r3
 8002f46:	0084      	lsls	r4, r0, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	4403      	add	r3, r0
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	440b      	add	r3, r1
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	4b45      	ldr	r3, [pc, #276]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002f5c:	7cdb      	ldrb	r3, [r3, #19]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	b29c      	uxth	r4, r3
 8002f64:	f000 fcca 	bl	80038fc <rand>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <Genera_Valores_RLT+0x2f8>)
 8002f6c:	fb83 2301 	smull	r2, r3, r3, r1
 8002f70:	10da      	asrs	r2, r3, #3
 8002f72:	17cb      	asrs	r3, r1, #31
 8002f74:	1ad2      	subs	r2, r2, r3
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	1aca      	subs	r2, r1, r3
 8002f80:	b293      	uxth	r3, r2
 8002f82:	4423      	add	r3, r4
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b0a      	subs	r3, #10
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	817b      	strh	r3, [r7, #10]
	V_med[4]=Val[4][0]*10000+Val[4][1]*1000+Val[4][2]*100+Val[4][3]*10+Val[4][4] - 10 + rand() % 20;
 8002f8c:	4b38      	ldr	r3, [pc, #224]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002f8e:	7d1b      	ldrb	r3, [r3, #20]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	0152      	lsls	r2, r2, #5
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	0092      	lsls	r2, r2, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	0091      	lsls	r1, r2, #2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002fac:	7d5b      	ldrb	r3, [r3, #21]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	0149      	lsls	r1, r1, #5
 8002fb4:	1ac9      	subs	r1, r1, r3
 8002fb6:	0089      	lsls	r1, r1, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002fc4:	7ddb      	ldrb	r3, [r3, #23]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	0089      	lsls	r1, r1, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	b299      	uxth	r1, r3
 8002fd2:	4b27      	ldr	r3, [pc, #156]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002fd4:	7d9b      	ldrb	r3, [r3, #22]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4618      	mov	r0, r3
 8002fda:	0080      	lsls	r0, r0, #2
 8002fdc:	4403      	add	r3, r0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	0084      	lsls	r4, r0, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	4403      	add	r3, r0
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	440b      	add	r3, r1
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8002ff6:	7e1b      	ldrb	r3, [r3, #24]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	b29c      	uxth	r4, r3
 8002ffe:	f000 fc7d 	bl	80038fc <rand>
 8003002:	4601      	mov	r1, r0
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <Genera_Valores_RLT+0x2f8>)
 8003006:	fb83 2301 	smull	r2, r3, r3, r1
 800300a:	10da      	asrs	r2, r3, #3
 800300c:	17cb      	asrs	r3, r1, #31
 800300e:	1ad2      	subs	r2, r2, r3
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	1aca      	subs	r2, r1, r3
 800301a:	b293      	uxth	r3, r2
 800301c:	4423      	add	r3, r4
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b0a      	subs	r3, #10
 8003022:	b29b      	uxth	r3, r3
 8003024:	81bb      	strh	r3, [r7, #12]
	V_med[5]=Val[5][0]*10000+Val[5][1]*1000+Val[5][2]*100+Val[5][3]*10+Val[5][4] - 10 + rand() % 20;
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8003028:	7e5b      	ldrb	r3, [r3, #25]
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	0152      	lsls	r2, r2, #5
 8003030:	1ad2      	subs	r2, r2, r3
 8003032:	0092      	lsls	r2, r2, #2
 8003034:	4413      	add	r3, r2
 8003036:	461a      	mov	r2, r3
 8003038:	0091      	lsls	r1, r2, #2
 800303a:	461a      	mov	r2, r3
 800303c:	460b      	mov	r3, r1
 800303e:	4413      	add	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 8003046:	7e9b      	ldrb	r3, [r3, #26]
 8003048:	b29b      	uxth	r3, r3
 800304a:	4619      	mov	r1, r3
 800304c:	0149      	lsls	r1, r1, #5
 800304e:	1ac9      	subs	r1, r1, r3
 8003050:	0089      	lsls	r1, r1, #2
 8003052:	440b      	add	r3, r1
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	b29b      	uxth	r3, r3
 8003058:	4413      	add	r3, r2
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <Genera_Valores_RLT+0x2f4>)
 800305e:	7f1b      	ldrb	r3, [r3, #28]
 8003060:	b29b      	uxth	r3, r3
 8003062:	4619      	mov	r1, r3
 8003064:	0089      	lsls	r1, r1, #2
 8003066:	440b      	add	r3, r1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	b299      	uxth	r1, r3
 800306c:	e004      	b.n	8003078 <Genera_Valores_RLT+0x2fc>
 800306e:	bf00      	nop
 8003070:	2000030c 	.word	0x2000030c
 8003074:	66666667 	.word	0x66666667
 8003078:	4b9d      	ldr	r3, [pc, #628]	; (80032f0 <Genera_Valores_RLT+0x574>)
 800307a:	7edb      	ldrb	r3, [r3, #27]
 800307c:	b29b      	uxth	r3, r3
 800307e:	4618      	mov	r0, r3
 8003080:	0080      	lsls	r0, r0, #2
 8003082:	4403      	add	r3, r0
 8003084:	4618      	mov	r0, r3
 8003086:	0084      	lsls	r4, r0, #2
 8003088:	4618      	mov	r0, r3
 800308a:	4623      	mov	r3, r4
 800308c:	4403      	add	r3, r0
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	b29b      	uxth	r3, r3
 8003092:	440b      	add	r3, r1
 8003094:	b29b      	uxth	r3, r3
 8003096:	4413      	add	r3, r2
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b95      	ldr	r3, [pc, #596]	; (80032f0 <Genera_Valores_RLT+0x574>)
 800309c:	7f5b      	ldrb	r3, [r3, #29]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	b29c      	uxth	r4, r3
 80030a4:	f000 fc2a 	bl	80038fc <rand>
 80030a8:	4601      	mov	r1, r0
 80030aa:	4b92      	ldr	r3, [pc, #584]	; (80032f4 <Genera_Valores_RLT+0x578>)
 80030ac:	fb83 2301 	smull	r2, r3, r3, r1
 80030b0:	10da      	asrs	r2, r3, #3
 80030b2:	17cb      	asrs	r3, r1, #31
 80030b4:	1ad2      	subs	r2, r2, r3
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	1aca      	subs	r2, r1, r3
 80030c0:	b293      	uxth	r3, r2
 80030c2:	4423      	add	r3, r4
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b0a      	subs	r3, #10
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	81fb      	strh	r3, [r7, #14]
	V_med[6]=Val[6][2]*100+Val[6][3]*10+Val[6][4] - 10 + rand() % 20;
 80030cc:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <Genera_Valores_RLT+0x574>)
 80030ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	0092      	lsls	r2, r2, #2
 80030d8:	4413      	add	r3, r2
 80030da:	461a      	mov	r2, r3
 80030dc:	0091      	lsls	r1, r2, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	460b      	mov	r3, r1
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <Genera_Valores_RLT+0x574>)
 80030ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4619      	mov	r1, r3
 80030f2:	0089      	lsls	r1, r1, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b7c      	ldr	r3, [pc, #496]	; (80032f0 <Genera_Valores_RLT+0x574>)
 8003100:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003104:	b29b      	uxth	r3, r3
 8003106:	4413      	add	r3, r2
 8003108:	b29c      	uxth	r4, r3
 800310a:	f000 fbf7 	bl	80038fc <rand>
 800310e:	4601      	mov	r1, r0
 8003110:	4b78      	ldr	r3, [pc, #480]	; (80032f4 <Genera_Valores_RLT+0x578>)
 8003112:	fb83 2301 	smull	r2, r3, r3, r1
 8003116:	10da      	asrs	r2, r3, #3
 8003118:	17cb      	asrs	r3, r1, #31
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	1aca      	subs	r2, r1, r3
 8003126:	b293      	uxth	r3, r2
 8003128:	4423      	add	r3, r4
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b0a      	subs	r3, #10
 800312e:	b29b      	uxth	r3, r3
 8003130:	823b      	strh	r3, [r7, #16]
	V_med[7]=Val[7][2]*100+Val[7][3]*10+Val[7][4] - 10 + rand() % 20;
 8003132:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <Genera_Valores_RLT+0x574>)
 8003134:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	0092      	lsls	r2, r2, #2
 800313e:	4413      	add	r3, r2
 8003140:	461a      	mov	r2, r3
 8003142:	0091      	lsls	r1, r2, #2
 8003144:	461a      	mov	r2, r3
 8003146:	460b      	mov	r3, r1
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	b29a      	uxth	r2, r3
 800314e:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <Genera_Valores_RLT+0x574>)
 8003150:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003154:	b29b      	uxth	r3, r3
 8003156:	4619      	mov	r1, r3
 8003158:	0089      	lsls	r1, r1, #2
 800315a:	440b      	add	r3, r1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	4413      	add	r3, r2
 8003162:	b29a      	uxth	r2, r3
 8003164:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <Genera_Valores_RLT+0x574>)
 8003166:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800316a:	b29b      	uxth	r3, r3
 800316c:	4413      	add	r3, r2
 800316e:	b29c      	uxth	r4, r3
 8003170:	f000 fbc4 	bl	80038fc <rand>
 8003174:	4601      	mov	r1, r0
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <Genera_Valores_RLT+0x578>)
 8003178:	fb83 2301 	smull	r2, r3, r3, r1
 800317c:	10da      	asrs	r2, r3, #3
 800317e:	17cb      	asrs	r3, r1, #31
 8003180:	1ad2      	subs	r2, r2, r3
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	1aca      	subs	r2, r1, r3
 800318c:	b293      	uxth	r3, r2
 800318e:	4423      	add	r3, r4
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b0a      	subs	r3, #10
 8003194:	b29b      	uxth	r3, r3
 8003196:	827b      	strh	r3, [r7, #18]
	V_med[8]=Val[8][2]*100+Val[8][3]*10+Val[8][4] - 10 + rand() % 20;
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <Genera_Valores_RLT+0x574>)
 800319a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	461a      	mov	r2, r3
 80031a8:	0091      	lsls	r1, r2, #2
 80031aa:	461a      	mov	r2, r3
 80031ac:	460b      	mov	r3, r1
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <Genera_Valores_RLT+0x574>)
 80031b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	0089      	lsls	r1, r1, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <Genera_Valores_RLT+0x574>)
 80031cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	b29c      	uxth	r4, r3
 80031d6:	f000 fb91 	bl	80038fc <rand>
 80031da:	4601      	mov	r1, r0
 80031dc:	4b45      	ldr	r3, [pc, #276]	; (80032f4 <Genera_Valores_RLT+0x578>)
 80031de:	fb83 2301 	smull	r2, r3, r3, r1
 80031e2:	10da      	asrs	r2, r3, #3
 80031e4:	17cb      	asrs	r3, r1, #31
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	1aca      	subs	r2, r1, r3
 80031f2:	b293      	uxth	r3, r2
 80031f4:	4423      	add	r3, r4
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b0a      	subs	r3, #10
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	82bb      	strh	r3, [r7, #20]

	k=0;
 80031fe:	2300      	movs	r3, #0
 8003200:	75bb      	strb	r3, [r7, #22]
	//Separo, paso a ASCII y armo el vector Tensión
	for(i=0;i<=14;i+=5)
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]
 8003206:	e06d      	b.n	80032e4 <Genera_Valores_RLT+0x568>
	{
		//Solo cambian los dos ultimos digitos
		rlt_U[i]  = '0';
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <Genera_Valores_RLT+0x57c>)
 800320c:	2130      	movs	r1, #48	; 0x30
 800320e:	54d1      	strb	r1, [r2, r3]
		rlt_U[i+1]= (V_med[k]/1000)+48;
 8003210:	7dbb      	ldrb	r3, [r7, #22]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	f107 0218 	add.w	r2, r7, #24
 8003218:	4413      	add	r3, r2
 800321a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800321e:	4a37      	ldr	r2, [pc, #220]	; (80032fc <Genera_Valores_RLT+0x580>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	b29b      	uxth	r3, r3
 8003228:	b2da      	uxtb	r2, r3
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	3301      	adds	r3, #1
 800322e:	3230      	adds	r2, #48	; 0x30
 8003230:	b2d1      	uxtb	r1, r2
 8003232:	4a31      	ldr	r2, [pc, #196]	; (80032f8 <Genera_Valores_RLT+0x57c>)
 8003234:	54d1      	strb	r1, [r2, r3]
		rlt_U[i+2]= ((V_med[k]%1000)/100)+48;
 8003236:	7dbb      	ldrb	r3, [r7, #22]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	f107 0218 	add.w	r2, r7, #24
 800323e:	4413      	add	r3, r2
 8003240:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003244:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <Genera_Valores_RLT+0x580>)
 8003246:	fba2 1203 	umull	r1, r2, r2, r3
 800324a:	0992      	lsrs	r2, r2, #6
 800324c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003250:	fb01 f202 	mul.w	r2, r1, r2
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	b29b      	uxth	r3, r3
 8003258:	4a29      	ldr	r2, [pc, #164]	; (8003300 <Genera_Valores_RLT+0x584>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b29b      	uxth	r3, r3
 8003262:	b2da      	uxtb	r2, r3
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	3302      	adds	r3, #2
 8003268:	3230      	adds	r2, #48	; 0x30
 800326a:	b2d1      	uxtb	r1, r2
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <Genera_Valores_RLT+0x57c>)
 800326e:	54d1      	strb	r1, [r2, r3]
		rlt_U[i+3]= ((V_med[k]%100)/10)+48;
 8003270:	7dbb      	ldrb	r3, [r7, #22]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	f107 0218 	add.w	r2, r7, #24
 8003278:	4413      	add	r3, r2
 800327a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800327e:	4a20      	ldr	r2, [pc, #128]	; (8003300 <Genera_Valores_RLT+0x584>)
 8003280:	fba2 1203 	umull	r1, r2, r2, r3
 8003284:	0952      	lsrs	r2, r2, #5
 8003286:	2164      	movs	r1, #100	; 0x64
 8003288:	fb01 f202 	mul.w	r2, r1, r2
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <Genera_Valores_RLT+0x588>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	08db      	lsrs	r3, r3, #3
 8003298:	b29b      	uxth	r3, r3
 800329a:	b2da      	uxtb	r2, r3
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	3303      	adds	r3, #3
 80032a0:	3230      	adds	r2, #48	; 0x30
 80032a2:	b2d1      	uxtb	r1, r2
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <Genera_Valores_RLT+0x57c>)
 80032a6:	54d1      	strb	r1, [r2, r3]
		rlt_U[i+4]= (V_med[k]%10)+48;
 80032a8:	7dbb      	ldrb	r3, [r7, #22]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	f107 0218 	add.w	r2, r7, #24
 80032b0:	4413      	add	r3, r2
 80032b2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <Genera_Valores_RLT+0x588>)
 80032b8:	fba3 1302 	umull	r1, r3, r3, r2
 80032bc:	08d9      	lsrs	r1, r3, #3
 80032be:	460b      	mov	r3, r1
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	3304      	adds	r3, #4
 80032d0:	3230      	adds	r2, #48	; 0x30
 80032d2:	b2d1      	uxtb	r1, r2
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <Genera_Valores_RLT+0x57c>)
 80032d6:	54d1      	strb	r1, [r2, r3]
		k++;
 80032d8:	7dbb      	ldrb	r3, [r7, #22]
 80032da:	3301      	adds	r3, #1
 80032dc:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<=14;i+=5)
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	3305      	adds	r3, #5
 80032e2:	75fb      	strb	r3, [r7, #23]
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	2b0e      	cmp	r3, #14
 80032e8:	d98e      	bls.n	8003208 <Genera_Valores_RLT+0x48c>
	}

	//Separo, paso a ASCII y armo el vector Corriente
	for(i=0;i<=14;i+=5)
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
 80032ee:	e091      	b.n	8003414 <Genera_Valores_RLT+0x698>
 80032f0:	2000030c 	.word	0x2000030c
 80032f4:	66666667 	.word	0x66666667
 80032f8:	2000034c 	.word	0x2000034c
 80032fc:	10624dd3 	.word	0x10624dd3
 8003300:	51eb851f 	.word	0x51eb851f
 8003304:	cccccccd 	.word	0xcccccccd
	{
		//Solo cambian los dos ultimos digitos
		rlt_I[i]  =  (V_med[k]/10000)+48;
 8003308:	7dbb      	ldrb	r3, [r7, #22]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	f107 0218 	add.w	r2, r7, #24
 8003310:	4413      	add	r3, r2
 8003312:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003316:	4a76      	ldr	r2, [pc, #472]	; (80034f0 <Genera_Valores_RLT+0x774>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	0b5b      	lsrs	r3, r3, #13
 800331e:	b29b      	uxth	r3, r3
 8003320:	b2da      	uxtb	r2, r3
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	3230      	adds	r2, #48	; 0x30
 8003326:	b2d1      	uxtb	r1, r2
 8003328:	4a72      	ldr	r2, [pc, #456]	; (80034f4 <Genera_Valores_RLT+0x778>)
 800332a:	54d1      	strb	r1, [r2, r3]
		rlt_I[i+1]= ((V_med[k]%10000)/1000)+48;
 800332c:	7dbb      	ldrb	r3, [r7, #22]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	f107 0218 	add.w	r2, r7, #24
 8003334:	4413      	add	r3, r2
 8003336:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800333a:	4a6d      	ldr	r2, [pc, #436]	; (80034f0 <Genera_Valores_RLT+0x774>)
 800333c:	fba2 1203 	umull	r1, r2, r2, r3
 8003340:	0b52      	lsrs	r2, r2, #13
 8003342:	f242 7110 	movw	r1, #10000	; 0x2710
 8003346:	fb01 f202 	mul.w	r2, r1, r2
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	b29b      	uxth	r3, r3
 800334e:	4a6a      	ldr	r2, [pc, #424]	; (80034f8 <Genera_Valores_RLT+0x77c>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	b29b      	uxth	r3, r3
 8003358:	b2da      	uxtb	r2, r3
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	3301      	adds	r3, #1
 800335e:	3230      	adds	r2, #48	; 0x30
 8003360:	b2d1      	uxtb	r1, r2
 8003362:	4a64      	ldr	r2, [pc, #400]	; (80034f4 <Genera_Valores_RLT+0x778>)
 8003364:	54d1      	strb	r1, [r2, r3]
		rlt_I[i+2]= ((V_med[k]%1000)/100)+48;
 8003366:	7dbb      	ldrb	r3, [r7, #22]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	f107 0218 	add.w	r2, r7, #24
 800336e:	4413      	add	r3, r2
 8003370:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003374:	4a60      	ldr	r2, [pc, #384]	; (80034f8 <Genera_Valores_RLT+0x77c>)
 8003376:	fba2 1203 	umull	r1, r2, r2, r3
 800337a:	0992      	lsrs	r2, r2, #6
 800337c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003380:	fb01 f202 	mul.w	r2, r1, r2
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <Genera_Valores_RLT+0x780>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	b29b      	uxth	r3, r3
 8003392:	b2da      	uxtb	r2, r3
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	3302      	adds	r3, #2
 8003398:	3230      	adds	r2, #48	; 0x30
 800339a:	b2d1      	uxtb	r1, r2
 800339c:	4a55      	ldr	r2, [pc, #340]	; (80034f4 <Genera_Valores_RLT+0x778>)
 800339e:	54d1      	strb	r1, [r2, r3]
		rlt_I[i+3]= ((V_med[k]%100)/10)+48;
 80033a0:	7dbb      	ldrb	r3, [r7, #22]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	f107 0218 	add.w	r2, r7, #24
 80033a8:	4413      	add	r3, r2
 80033aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80033ae:	4a53      	ldr	r2, [pc, #332]	; (80034fc <Genera_Valores_RLT+0x780>)
 80033b0:	fba2 1203 	umull	r1, r2, r2, r3
 80033b4:	0952      	lsrs	r2, r2, #5
 80033b6:	2164      	movs	r1, #100	; 0x64
 80033b8:	fb01 f202 	mul.w	r2, r1, r2
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	4a4f      	ldr	r2, [pc, #316]	; (8003500 <Genera_Valores_RLT+0x784>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	08db      	lsrs	r3, r3, #3
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	3303      	adds	r3, #3
 80033d0:	3230      	adds	r2, #48	; 0x30
 80033d2:	b2d1      	uxtb	r1, r2
 80033d4:	4a47      	ldr	r2, [pc, #284]	; (80034f4 <Genera_Valores_RLT+0x778>)
 80033d6:	54d1      	strb	r1, [r2, r3]
		rlt_I[i+4]= (V_med[k]%10)+48;
 80033d8:	7dbb      	ldrb	r3, [r7, #22]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	f107 0218 	add.w	r2, r7, #24
 80033e0:	4413      	add	r3, r2
 80033e2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80033e6:	4b46      	ldr	r3, [pc, #280]	; (8003500 <Genera_Valores_RLT+0x784>)
 80033e8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ec:	08d9      	lsrs	r1, r3, #3
 80033ee:	460b      	mov	r3, r1
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	3304      	adds	r3, #4
 8003400:	3230      	adds	r2, #48	; 0x30
 8003402:	b2d1      	uxtb	r1, r2
 8003404:	4a3b      	ldr	r2, [pc, #236]	; (80034f4 <Genera_Valores_RLT+0x778>)
 8003406:	54d1      	strb	r1, [r2, r3]
		k++;
 8003408:	7dbb      	ldrb	r3, [r7, #22]
 800340a:	3301      	adds	r3, #1
 800340c:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<=14;i+=5)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	3305      	adds	r3, #5
 8003412:	75fb      	strb	r3, [r7, #23]
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b0e      	cmp	r3, #14
 8003418:	f67f af76 	bls.w	8003308 <Genera_Valores_RLT+0x58c>
	}

	//Separo, paso a ASCII y armo el vector Angulo
	for(i=0;i<=14;i+=5)
 800341c:	2300      	movs	r3, #0
 800341e:	75fb      	strb	r3, [r7, #23]
 8003420:	e05e      	b.n	80034e0 <Genera_Valores_RLT+0x764>
	{
		//Solo cambian los dos ultimos digitos
		rlt_P[i]  = '0';					//Completa la trama de o caracteres
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	4a37      	ldr	r2, [pc, #220]	; (8003504 <Genera_Valores_RLT+0x788>)
 8003426:	2130      	movs	r1, #48	; 0x30
 8003428:	54d1      	strb	r1, [r2, r3]
		rlt_P[i+1]= Val[k][1]+48;			//Signo, quedó guardado en matriz de valores recibidos Val[]
 800342a:	7dba      	ldrb	r2, [r7, #22]
 800342c:	4936      	ldr	r1, [pc, #216]	; (8003508 <Genera_Valores_RLT+0x78c>)
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	440b      	add	r3, r1
 8003436:	3301      	adds	r3, #1
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	3301      	adds	r3, #1
 800343e:	3230      	adds	r2, #48	; 0x30
 8003440:	b2d1      	uxtb	r1, r2
 8003442:	4a30      	ldr	r2, [pc, #192]	; (8003504 <Genera_Valores_RLT+0x788>)
 8003444:	54d1      	strb	r1, [r2, r3]
		rlt_P[i+2]= (V_med[k]/100)+48; 		//Primer digito queda igual
 8003446:	7dbb      	ldrb	r3, [r7, #22]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	f107 0218 	add.w	r2, r7, #24
 800344e:	4413      	add	r3, r2
 8003450:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003454:	4a29      	ldr	r2, [pc, #164]	; (80034fc <Genera_Valores_RLT+0x780>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b29b      	uxth	r3, r3
 800345e:	b2da      	uxtb	r2, r3
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	3302      	adds	r3, #2
 8003464:	3230      	adds	r2, #48	; 0x30
 8003466:	b2d1      	uxtb	r1, r2
 8003468:	4a26      	ldr	r2, [pc, #152]	; (8003504 <Genera_Valores_RLT+0x788>)
 800346a:	54d1      	strb	r1, [r2, r3]
		rlt_P[i+3]= ((V_med[k]%100)/10)+48;
 800346c:	7dbb      	ldrb	r3, [r7, #22]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	f107 0218 	add.w	r2, r7, #24
 8003474:	4413      	add	r3, r2
 8003476:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800347a:	4a20      	ldr	r2, [pc, #128]	; (80034fc <Genera_Valores_RLT+0x780>)
 800347c:	fba2 1203 	umull	r1, r2, r2, r3
 8003480:	0952      	lsrs	r2, r2, #5
 8003482:	2164      	movs	r1, #100	; 0x64
 8003484:	fb01 f202 	mul.w	r2, r1, r2
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <Genera_Valores_RLT+0x784>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	08db      	lsrs	r3, r3, #3
 8003494:	b29b      	uxth	r3, r3
 8003496:	b2da      	uxtb	r2, r3
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	3303      	adds	r3, #3
 800349c:	3230      	adds	r2, #48	; 0x30
 800349e:	b2d1      	uxtb	r1, r2
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <Genera_Valores_RLT+0x788>)
 80034a2:	54d1      	strb	r1, [r2, r3]
		rlt_P[i+4]= (V_med[k]%10)+48;
 80034a4:	7dbb      	ldrb	r3, [r7, #22]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	f107 0218 	add.w	r2, r7, #24
 80034ac:	4413      	add	r3, r2
 80034ae:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <Genera_Valores_RLT+0x784>)
 80034b4:	fba3 1302 	umull	r1, r3, r3, r2
 80034b8:	08d9      	lsrs	r1, r3, #3
 80034ba:	460b      	mov	r3, r1
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	3304      	adds	r3, #4
 80034cc:	3230      	adds	r2, #48	; 0x30
 80034ce:	b2d1      	uxtb	r1, r2
 80034d0:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <Genera_Valores_RLT+0x788>)
 80034d2:	54d1      	strb	r1, [r2, r3]
		k++;
 80034d4:	7dbb      	ldrb	r3, [r7, #22]
 80034d6:	3301      	adds	r3, #1
 80034d8:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<=14;i+=5)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	3305      	adds	r3, #5
 80034de:	75fb      	strb	r3, [r7, #23]
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b0e      	cmp	r3, #14
 80034e4:	d99d      	bls.n	8003422 <Genera_Valores_RLT+0x6a6>
	}



} //Genera_Valores_RLT
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	d1b71759 	.word	0xd1b71759
 80034f4:	200004dc 	.word	0x200004dc
 80034f8:	10624dd3 	.word	0x10624dd3
 80034fc:	51eb851f 	.word	0x51eb851f
 8003500:	cccccccd 	.word	0xcccccccd
 8003504:	2000033c 	.word	0x2000033c
 8003508:	2000030c 	.word	0x2000030c

0800350c <Valida_Entradas>:


int Valida_Entradas (void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
	// En esta version no se distinuen errores de fases.
	//Lee la llave en BCD de 3 digitos
	uint8_t BCD[3];
	uint8_t valor=0;
 8003512:	2300      	movs	r3, #0
 8003514:	71fb      	strb	r3, [r7, #7]

	BCD[0]= HAL_GPIO_ReadPin(BCD_In_A_GPIO_Port, BCD_In_A_Pin);
 8003516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800351a:	4811      	ldr	r0, [pc, #68]	; (8003560 <Valida_Entradas+0x54>)
 800351c:	f7fd f978 	bl	8000810 <HAL_GPIO_ReadPin>
 8003520:	4603      	mov	r3, r0
 8003522:	713b      	strb	r3, [r7, #4]
	BCD[1]= HAL_GPIO_ReadPin(BCD_In_B_GPIO_Port, BCD_In_B_Pin);
 8003524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003528:	480d      	ldr	r0, [pc, #52]	; (8003560 <Valida_Entradas+0x54>)
 800352a:	f7fd f971 	bl	8000810 <HAL_GPIO_ReadPin>
 800352e:	4603      	mov	r3, r0
 8003530:	717b      	strb	r3, [r7, #5]
	BCD[2]= HAL_GPIO_ReadPin(BCD_In_C_GPIO_Port, BCD_In_C_Pin);
 8003532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003536:	480a      	ldr	r0, [pc, #40]	; (8003560 <Valida_Entradas+0x54>)
 8003538:	f7fd f96a 	bl	8000810 <HAL_GPIO_ReadPin>
 800353c:	4603      	mov	r3, r0
 800353e:	71bb      	strb	r3, [r7, #6]

	//Calcula el valor
	valor = BCD[0]*1 + BCD[1]*2 + BCD[2]*4;
 8003540:	793a      	ldrb	r2, [r7, #4]
 8003542:	79bb      	ldrb	r3, [r7, #6]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	b2d9      	uxtb	r1, r3
 8003548:	797b      	ldrb	r3, [r7, #5]
 800354a:	440b      	add	r3, r1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4413      	add	r3, r2
 8003554:	71fb      	strb	r3, [r7, #7]

return(valor);
 8003556:	79fb      	ldrb	r3, [r7, #7]

} //Fin valida entradas
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40010c00 	.word	0x40010c00

08003564 <Envio_tx>:

void Envio_tx (void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
	//Habilito la transmisión
	  HAL_GPIO_WritePin(HAB_Tx_GPIO_Port, HAB_Tx_Pin, 1);
 8003568:	2201      	movs	r2, #1
 800356a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800356e:	480c      	ldr	r0, [pc, #48]	; (80035a0 <Envio_tx+0x3c>)
 8003570:	f7fd f965 	bl	800083e <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8003574:	2032      	movs	r0, #50	; 0x32
 8003576:	f7fc fe4b 	bl	8000210 <HAL_Delay>

	  //Envio
	  HAL_UART_Transmit_IT(&huart1, (uint8_t*) &v_tx, l_tx);
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <Envio_tx+0x40>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	4909      	ldr	r1, [pc, #36]	; (80035a8 <Envio_tx+0x44>)
 8003582:	480a      	ldr	r0, [pc, #40]	; (80035ac <Envio_tx+0x48>)
 8003584:	f7fe f990 	bl	80018a8 <HAL_UART_Transmit_IT>
	  HAL_Delay(250);
 8003588:	20fa      	movs	r0, #250	; 0xfa
 800358a:	f7fc fe41 	bl	8000210 <HAL_Delay>

	  //Deshabilito la transmision
	  HAL_GPIO_WritePin(HAB_Tx_GPIO_Port, HAB_Tx_Pin, 0);
 800358e:	2200      	movs	r2, #0
 8003590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <Envio_tx+0x3c>)
 8003596:	f7fd f952 	bl	800083e <HAL_GPIO_WritePin>
}	//Fin Envio_tx
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40010800 	.word	0x40010800
 80035a4:	2000008e 	.word	0x2000008e
 80035a8:	200003ac 	.word	0x200003ac
 80035ac:	200002cc 	.word	0x200002cc

080035b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_MspInit+0x5c>)
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	4a14      	ldr	r2, [pc, #80]	; (8003618 <HAL_MspInit+0x5c>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6193      	str	r3, [r2, #24]
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_MspInit+0x5c>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_MspInit+0x5c>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_MspInit+0x5c>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	61d3      	str	r3, [r2, #28]
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <HAL_MspInit+0x5c>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_MspInit+0x60>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_MspInit+0x60>)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	40021000 	.word	0x40021000
 800361c:	40010000 	.word	0x40010000

08003620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d113      	bne.n	800365a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_TIM_Base_MspInit+0x44>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <HAL_TIM_Base_MspInit+0x44>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	61d3      	str	r3, [r2, #28]
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_TIM_Base_MspInit+0x44>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	201c      	movs	r0, #28
 8003650:	f7fc fed3 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003654:	201c      	movs	r0, #28
 8003656:	f7fc feec 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000

08003668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_UART_MspInit+0x9c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d139      	bne.n	80036fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_UART_MspInit+0xa0>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_UART_MspInit+0xa0>)
 800368e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003692:	6193      	str	r3, [r2, #24]
 8003694:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <HAL_UART_MspInit+0xa0>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_UART_MspInit+0xa0>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a18      	ldr	r2, [pc, #96]	; (8003708 <HAL_UART_MspInit+0xa0>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_UART_MspInit+0xa0>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	4619      	mov	r1, r3
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <HAL_UART_MspInit+0xa4>)
 80036ce:	f7fc ff41 	bl	8000554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4619      	mov	r1, r3
 80036e6:	4809      	ldr	r0, [pc, #36]	; (800370c <HAL_UART_MspInit+0xa4>)
 80036e8:	f7fc ff34 	bl	8000554 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036ec:	2200      	movs	r2, #0
 80036ee:	2100      	movs	r1, #0
 80036f0:	2025      	movs	r0, #37	; 0x25
 80036f2:	f7fc fe82 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036f6:	2025      	movs	r0, #37	; 0x25
 80036f8:	f7fc fe9b 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036fc:	bf00      	nop
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40013800 	.word	0x40013800
 8003708:	40021000 	.word	0x40021000
 800370c:	40010800 	.word	0x40010800

08003710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003720:	e7fe      	b.n	8003720 <HardFault_Handler+0x4>

08003722 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003726:	e7fe      	b.n	8003726 <MemManage_Handler+0x4>

08003728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372c:	e7fe      	b.n	800372c <BusFault_Handler+0x4>

0800372e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003732:	e7fe      	b.n	8003732 <UsageFault_Handler+0x4>

08003734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800375c:	f7fc fd3c 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}

08003764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <TIM2_IRQHandler+0x10>)
 800376a:	f7fd fce8 	bl	800113e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000490 	.word	0x20000490

08003778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <USART1_IRQHandler+0x10>)
 800377e:	f7fe f92b 	bl	80019d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200002cc 	.word	0x200002cc

0800378c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <_sbrk+0x50>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <_sbrk+0x16>
		heap_end = &end;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <_sbrk+0x50>)
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <_sbrk+0x54>)
 80037a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <_sbrk+0x50>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <_sbrk+0x50>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	466a      	mov	r2, sp
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d907      	bls.n	80037c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037b6:	f000 f86f 	bl	8003898 <__errno>
 80037ba:	4602      	mov	r2, r0
 80037bc:	230c      	movs	r3, #12
 80037be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c4:	e006      	b.n	80037d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <_sbrk+0x50>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	4a03      	ldr	r2, [pc, #12]	; (80037dc <_sbrk+0x50>)
 80037d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037d2:	68fb      	ldr	r3, [r7, #12]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	200000a0 	.word	0x200000a0
 80037e0:	200004f0 	.word	0x200004f0

080037e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <SystemInit+0x5c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a14      	ldr	r2, [pc, #80]	; (8003840 <SystemInit+0x5c>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <SystemInit+0x5c>)
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	4911      	ldr	r1, [pc, #68]	; (8003840 <SystemInit+0x5c>)
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <SystemInit+0x60>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <SystemInit+0x5c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <SystemInit+0x5c>)
 8003806:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <SystemInit+0x5c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <SystemInit+0x5c>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800381c:	4b08      	ldr	r3, [pc, #32]	; (8003840 <SystemInit+0x5c>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <SystemInit+0x5c>)
 8003822:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003826:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <SystemInit+0x5c>)
 800382a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800382e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <SystemInit+0x64>)
 8003832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003836:	609a      	str	r2, [r3, #8]
#endif 
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40021000 	.word	0x40021000
 8003844:	f8ff0000 	.word	0xf8ff0000
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800384c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800384e:	e003      	b.n	8003858 <LoopCopyDataInit>

08003850 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003852:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003854:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003856:	3104      	adds	r1, #4

08003858 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003858:	480a      	ldr	r0, [pc, #40]	; (8003884 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800385c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800385e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003860:	d3f6      	bcc.n	8003850 <CopyDataInit>
  ldr r2, =_sbss
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003864:	e002      	b.n	800386c <LoopFillZerobss>

08003866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003868:	f842 3b04 	str.w	r3, [r2], #4

0800386c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800386e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003870:	d3f9      	bcc.n	8003866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003872:	f7ff ffb7 	bl	80037e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003876:	f000 f815 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800387a:	f7fe fbf3 	bl	8002064 <main>
  bx lr
 800387e:	4770      	bx	lr
  ldr r3, =_sidata
 8003880:	08003a98 	.word	0x08003a98
  ldr r0, =_sdata
 8003884:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003888:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800388c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003890:	200004f0 	.word	0x200004f0

08003894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003894:	e7fe      	b.n	8003894 <ADC1_2_IRQHandler>
	...

08003898 <__errno>:
 8003898:	4b01      	ldr	r3, [pc, #4]	; (80038a0 <__errno+0x8>)
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	2000000c 	.word	0x2000000c

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	2500      	movs	r5, #0
 80038a8:	4e0c      	ldr	r6, [pc, #48]	; (80038dc <__libc_init_array+0x38>)
 80038aa:	4c0d      	ldr	r4, [pc, #52]	; (80038e0 <__libc_init_array+0x3c>)
 80038ac:	1ba4      	subs	r4, r4, r6
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	42a5      	cmp	r5, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	f000 f8ca 	bl	8003a4c <_init>
 80038b8:	2500      	movs	r5, #0
 80038ba:	4e0a      	ldr	r6, [pc, #40]	; (80038e4 <__libc_init_array+0x40>)
 80038bc:	4c0a      	ldr	r4, [pc, #40]	; (80038e8 <__libc_init_array+0x44>)
 80038be:	1ba4      	subs	r4, r4, r6
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	42a5      	cmp	r5, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038cc:	4798      	blx	r3
 80038ce:	3501      	adds	r5, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d6:	4798      	blx	r3
 80038d8:	3501      	adds	r5, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	08003a90 	.word	0x08003a90
 80038e0:	08003a90 	.word	0x08003a90
 80038e4:	08003a90 	.word	0x08003a90
 80038e8:	08003a94 	.word	0x08003a94

080038ec <memset>:
 80038ec:	4603      	mov	r3, r0
 80038ee:	4402      	add	r2, r0
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d100      	bne.n	80038f6 <memset+0xa>
 80038f4:	4770      	bx	lr
 80038f6:	f803 1b01 	strb.w	r1, [r3], #1
 80038fa:	e7f9      	b.n	80038f0 <memset+0x4>

080038fc <rand>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <rand+0x50>)
 8003900:	681c      	ldr	r4, [r3, #0]
 8003902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003904:	b97b      	cbnz	r3, 8003926 <rand+0x2a>
 8003906:	2018      	movs	r0, #24
 8003908:	f000 f82c 	bl	8003964 <malloc>
 800390c:	4a10      	ldr	r2, [pc, #64]	; (8003950 <rand+0x54>)
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <rand+0x58>)
 8003910:	63a0      	str	r0, [r4, #56]	; 0x38
 8003912:	e9c0 2300 	strd	r2, r3, [r0]
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <rand+0x5c>)
 8003918:	2201      	movs	r2, #1
 800391a:	6083      	str	r3, [r0, #8]
 800391c:	230b      	movs	r3, #11
 800391e:	8183      	strh	r3, [r0, #12]
 8003920:	2300      	movs	r3, #0
 8003922:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003928:	480c      	ldr	r0, [pc, #48]	; (800395c <rand+0x60>)
 800392a:	690a      	ldr	r2, [r1, #16]
 800392c:	694b      	ldr	r3, [r1, #20]
 800392e:	4350      	muls	r0, r2
 8003930:	4c0b      	ldr	r4, [pc, #44]	; (8003960 <rand+0x64>)
 8003932:	fb04 0003 	mla	r0, r4, r3, r0
 8003936:	fba2 2304 	umull	r2, r3, r2, r4
 800393a:	4403      	add	r3, r0
 800393c:	1c54      	adds	r4, r2, #1
 800393e:	f143 0500 	adc.w	r5, r3, #0
 8003942:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003946:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	2000000c 	.word	0x2000000c
 8003950:	abcd330e 	.word	0xabcd330e
 8003954:	e66d1234 	.word	0xe66d1234
 8003958:	0005deec 	.word	0x0005deec
 800395c:	5851f42d 	.word	0x5851f42d
 8003960:	4c957f2d 	.word	0x4c957f2d

08003964 <malloc>:
 8003964:	4b02      	ldr	r3, [pc, #8]	; (8003970 <malloc+0xc>)
 8003966:	4601      	mov	r1, r0
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	f000 b803 	b.w	8003974 <_malloc_r>
 800396e:	bf00      	nop
 8003970:	2000000c 	.word	0x2000000c

08003974 <_malloc_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	1ccd      	adds	r5, r1, #3
 8003978:	f025 0503 	bic.w	r5, r5, #3
 800397c:	3508      	adds	r5, #8
 800397e:	2d0c      	cmp	r5, #12
 8003980:	bf38      	it	cc
 8003982:	250c      	movcc	r5, #12
 8003984:	2d00      	cmp	r5, #0
 8003986:	4606      	mov	r6, r0
 8003988:	db01      	blt.n	800398e <_malloc_r+0x1a>
 800398a:	42a9      	cmp	r1, r5
 800398c:	d903      	bls.n	8003996 <_malloc_r+0x22>
 800398e:	230c      	movs	r3, #12
 8003990:	6033      	str	r3, [r6, #0]
 8003992:	2000      	movs	r0, #0
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	f000 f857 	bl	8003a48 <__malloc_lock>
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <_malloc_r+0xac>)
 800399c:	6814      	ldr	r4, [r2, #0]
 800399e:	4621      	mov	r1, r4
 80039a0:	b991      	cbnz	r1, 80039c8 <_malloc_r+0x54>
 80039a2:	4c20      	ldr	r4, [pc, #128]	; (8003a24 <_malloc_r+0xb0>)
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	b91b      	cbnz	r3, 80039b0 <_malloc_r+0x3c>
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 f83d 	bl	8003a28 <_sbrk_r>
 80039ae:	6020      	str	r0, [r4, #0]
 80039b0:	4629      	mov	r1, r5
 80039b2:	4630      	mov	r0, r6
 80039b4:	f000 f838 	bl	8003a28 <_sbrk_r>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d124      	bne.n	8003a06 <_malloc_r+0x92>
 80039bc:	230c      	movs	r3, #12
 80039be:	4630      	mov	r0, r6
 80039c0:	6033      	str	r3, [r6, #0]
 80039c2:	f000 f842 	bl	8003a4a <__malloc_unlock>
 80039c6:	e7e4      	b.n	8003992 <_malloc_r+0x1e>
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	1b5b      	subs	r3, r3, r5
 80039cc:	d418      	bmi.n	8003a00 <_malloc_r+0x8c>
 80039ce:	2b0b      	cmp	r3, #11
 80039d0:	d90f      	bls.n	80039f2 <_malloc_r+0x7e>
 80039d2:	600b      	str	r3, [r1, #0]
 80039d4:	18cc      	adds	r4, r1, r3
 80039d6:	50cd      	str	r5, [r1, r3]
 80039d8:	4630      	mov	r0, r6
 80039da:	f000 f836 	bl	8003a4a <__malloc_unlock>
 80039de:	f104 000b 	add.w	r0, r4, #11
 80039e2:	1d23      	adds	r3, r4, #4
 80039e4:	f020 0007 	bic.w	r0, r0, #7
 80039e8:	1ac3      	subs	r3, r0, r3
 80039ea:	d0d3      	beq.n	8003994 <_malloc_r+0x20>
 80039ec:	425a      	negs	r2, r3
 80039ee:	50e2      	str	r2, [r4, r3]
 80039f0:	e7d0      	b.n	8003994 <_malloc_r+0x20>
 80039f2:	684b      	ldr	r3, [r1, #4]
 80039f4:	428c      	cmp	r4, r1
 80039f6:	bf16      	itet	ne
 80039f8:	6063      	strne	r3, [r4, #4]
 80039fa:	6013      	streq	r3, [r2, #0]
 80039fc:	460c      	movne	r4, r1
 80039fe:	e7eb      	b.n	80039d8 <_malloc_r+0x64>
 8003a00:	460c      	mov	r4, r1
 8003a02:	6849      	ldr	r1, [r1, #4]
 8003a04:	e7cc      	b.n	80039a0 <_malloc_r+0x2c>
 8003a06:	1cc4      	adds	r4, r0, #3
 8003a08:	f024 0403 	bic.w	r4, r4, #3
 8003a0c:	42a0      	cmp	r0, r4
 8003a0e:	d005      	beq.n	8003a1c <_malloc_r+0xa8>
 8003a10:	1a21      	subs	r1, r4, r0
 8003a12:	4630      	mov	r0, r6
 8003a14:	f000 f808 	bl	8003a28 <_sbrk_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d0cf      	beq.n	80039bc <_malloc_r+0x48>
 8003a1c:	6025      	str	r5, [r4, #0]
 8003a1e:	e7db      	b.n	80039d8 <_malloc_r+0x64>
 8003a20:	200000a4 	.word	0x200000a4
 8003a24:	200000a8 	.word	0x200000a8

08003a28 <_sbrk_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4c05      	ldr	r4, [pc, #20]	; (8003a44 <_sbrk_r+0x1c>)
 8003a2e:	4605      	mov	r5, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	f7ff feaa 	bl	800378c <_sbrk>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_sbrk_r+0x1a>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_sbrk_r+0x1a>
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	200004ec 	.word	0x200004ec

08003a48 <__malloc_lock>:
 8003a48:	4770      	bx	lr

08003a4a <__malloc_unlock>:
 8003a4a:	4770      	bx	lr

08003a4c <_init>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr

08003a58 <_fini>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr
